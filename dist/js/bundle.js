/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/script.js":
/*!**************************!*\
  !*** ./src/js/script.js ***!
  \**************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\r\nСтворити клас SuperMath.\r\n\r\nДодати до екземпляра метод - \r\ncheck(obj), параметр obj \r\nякого має властивості X, Y, znak. \r\n\r\nМетод повинен підтвердити у користувача, \r\nчи хоче він зробити дію znak c Х і У. \r\nЯкщо хоче, зробити математичну \r\nдію znak (яка описана в прототипі), \r\nінакше - запитати введення нових даних \r\nчерез метод input() класу SuperMath. \r\n\r\nПриклад об'єкта: `obj = {X:12, Y:3, znak: “/”}`, можливі варіанти znak  `+' '-'  '/' '*'  '%'.\r\n\r\nПри введенні znak потрібно перевірити коректність введення на можливі математичні дії.\r\n\r\np = new SuperMath();\r\np.check(obj); // --> no p.input() -> 3 prompt -> рахує\r\n// */\nvar SuperMath = /*#__PURE__*/function () {\n  function SuperMath() {\n    _classCallCheck(this, SuperMath);\n    this.myObject = {\n      X: null,\n      Y: null,\n      znak: null\n    };\n  }\n  _createClass(SuperMath, [{\n    key: \"check\",\n    value: function check(obj) {\n      var userDecision = confirm(\"\\u0412\\u044B\\u043F\\u043E\\u043B\\u043D\\u0438\\u0442\\u044C \\u043C\\u0430\\u0442 \\u043E\\u043F\\u0435\\u0440\\u0430\\u0446\\u0438\\u044E X \\u0456 Y?\");\n      if (userDecision) {\n        var userDecisionOkObj = confirm(\"\\u0412\\u044B\\u043F\\u043E\\u043B\\u043D\\u0438\\u0442\\u044C \\u043C\\u0430\\u0442 \\u043E\\u043F\\u0435\\u0440\\u0430\\u0446\\u0438\\u044E \\u0441\\u0443\\u0449\\u0435\\u0441\\u0442\\u0432\\u0443\\u044E\\u0449\\u0438\\u043C \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u043E\\u043C X \\u0456 Y?\");\n        if (userDecisionOkObj) {\n          if (this.isValidOperation(obj)) {\n            this.calculate(obj);\n          } else {\n            console.log(\"Не корректные данные \");\n          }\n        } else {\n          this.input();\n          if (this.isValidOperation(this.myObject)) {\n            this.calculate(this.myObject);\n          } else {\n            console.log(\"Не корректные данные\");\n          }\n        }\n      } else {\n        console.log(\"Вы отказались\");\n      }\n    }\n  }, {\n    key: \"isValidOperation\",\n    value: function isValidOperation(obj) {\n      var X = obj.X,\n        Y = obj.Y,\n        znak = obj.znak;\n      if (isNaN(X) || isNaN(Y)) {\n        return false;\n      }\n      var supportedOperators = [\"+\", \"-\", \"*\", \"/\", \"%\"];\n      return supportedOperators.includes(znak);\n    }\n  }, {\n    key: \"calculate\",\n    value: function calculate(obj) {\n      var X = obj.X,\n        Y = obj.Y,\n        znak = obj.znak;\n      var result;\n      switch (znak) {\n        case \"+\":\n          result = X + Y;\n          break;\n        case \"-\":\n          result = X - Y;\n          break;\n        case \"*\":\n          result = X * Y;\n          break;\n        case \"/\":\n          if (Y !== 0) {\n            result = X / Y;\n          } else {\n            alert(\"Деление на НОЛЬ????\");\n            return;\n          }\n          break;\n        default:\n          alert(\"Что - то пошло не так \");\n          return;\n      }\n      console.log(\"\\u0420\\u0435\\u0437\\u0443\\u043B\\u044C\\u0442\\u0430\\u0442: \".concat(result));\n    }\n  }, {\n    key: \"input\",\n    value: function input() {\n      for (var key in this.myObject) {\n        if (this.myObject.hasOwnProperty(key)) {\n          var userInput = void 0;\n          if (key === \"znak\") {\n            userInput = prompt(\"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043E\\u0434\\u043D\\u0443 \\u0438\\u0437 \\u043C\\u0430\\u0442\\u0435\\u043C\\u0430\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u0438\\u0445 \\u043E\\u043F\\u0435\\u0440\\u0430\\u0446\\u0438\\u0439 (+, -, *, /, %) \\u0434\\u043B\\u044F \".concat(key, \":\"));\n          } else {\n            userInput = prompt(\"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0447\\u0438\\u0441\\u043B\\u043E\\u0432\\u043E\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435 \\u0434\\u043B\\u044F \".concat(key, \":\"));\n          }\n          if (userInput !== null && userInput !== \"\") {\n            if (key === \"znak\" && ![\"+\", \"-\", \"*\", \"/\", \"%\"].includes(userInput)) {\n              alert(\"Некорректная операция. Введите одну из математических операций: +, -, *, /, %\");\n              this.input(); // Повторный ввод\n              return;\n            } else {\n              this.myObject[key] = userInput;\n            }\n          } else {\n            alert(\"Необходимо ввести значение.\");\n            this.input(); // Повторный ввод\n            return;\n          }\n        }\n      }\n    }\n  }]);\n  return SuperMath;\n}(); // Приклад використання\nvar p = new SuperMath();\nvar obj = {\n  X: 36,\n  Y: 6,\n  znak: \"+\"\n};\np.check(obj);\n\n//# sourceURL=webpack:///./src/js/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/script.js"]();
/******/ 	
/******/ })()
;