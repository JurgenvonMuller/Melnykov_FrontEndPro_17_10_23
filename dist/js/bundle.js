/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/script.js":
/*!**************************!*\
  !*** ./src/js/script.js ***!
  \**************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n// import _ from 'lodash';\n// let maxElem = 0;\n// let key_maxElem = 0;\n// const { name } = require(\"browser-sync\");\n// let arr = [1, 2, 6, 4, 5, 3];\n// for(let i = 0;  i < arr.length - 1; i++) {\n//   if(arr[i] > maxElem) {\n//     maxElem = arr[i];\n//     key_maxElem = i;\n//   }\n//     if( arr[i] !== maxElem && i !== key_maxElem) {\n//       arr[i] = 0;\n//     }\n// }\n// console.log(maxElem);\n// console.log(key_maxElem);\n// // for(let i = 0;  i <= arr.length - 1; i++) {\n// // }\n// console.log(arr);\n/*  HOMEWORK 9 \r\nПереписати код нижче з використанням конструкції switch…case*/\n/*   ИСХОДНЫЙ КОД:\r\n\r\nlet numOrStr = prompt('input number or string');\r\nconsole.log(numOrStr)\r\n\r\nif(numOrStr === null) {\r\nconsole.log('ви скасували')\r\n} else if( numOrStr.trim() === '' ) {\r\nconsole.log('Empty String');\r\n} else if ( isNaN( +numOrStr ) ) {\r\nconsole.log(' number is Ba_NaN')\r\n} else {\r\nconsole.log('OK!')\r\n}\r\n\r\n        РЕШЕНИЕ ДОМАШНЕГО ЗАДАНИЯ С ИСПОЛЬЗОВАНИЕМ switch / case    */\n/*\r\nlet numOrStr = prompt('input number or string');\r\nconsole.log(numOrStr)\r\n\r\nswitch(true) {\r\n  case numOrStr === null:\r\n    console.log('ви скасували');\r\n  break;\r\n  case  numOrStr === '':\r\n    console.log('Empty String');\r\n  break;\r\n  case isNaN( +numOrStr ):\r\n    console.log(' number is Ba_NaN');\r\n  break;\r\n  default:\r\n    console.log('OK!');\r\n  break;\r\n}\r\n\r\n*/\n/*      Hometask additional \"Check - list\"\r\n        \r\n       FALSE\r\nconsole.log(Boolean(0));         // false\r\nconsole.log(Boolean(+0));        // false\r\nconsole.log(Boolean(-0));        // false\r\nconsole.log(Boolean(null));      // false\r\nconsole.log(Boolean(''));        // false\r\nconsole.log(Boolean(NaN));       // false\r\nconsole.log(Boolean(undefined)); // false\r\n          \r\n          TRUE\r\n\r\nconsole.log(Boolean('string'));   // true\r\nconsole.log(Boolean(+Infinity));  // true  \r\nconsole.log(Boolean(-Infinity));  // true\r\nconsole.log(Boolean('number'));   // true\r\n\r\n        ACHTUNG,  STRING!!!\r\n\r\nconsole.log(Boolean('0'));         // true\r\nconsole.log(Boolean('false'));     // true\r\nconsole.log(Boolean('NaN'));       // true\r\nconsole.log(Boolean('null'));      // true\r\nconsole.log(Boolean('undefined')); // true\r\n*/\n/*\r\n  1 const/let\r\n  2 variable names\r\n  3 correct output\r\n*/\n// HOME TASK - TO READ BY YOURSELF\n/*number.toString()\r\n\r\n10.toString();\r\n\r\nJS воспринмимает эту запись как попытку обратьтся к числу с плавающей точкой\r\nто есть к десятичной дроби. \r\nЧто бы избежать этого надо использовать один из методов изменения записи ЦЕЛЫХ чисел перед \r\ntoString() \r\n\r\nvar number = 10;\r\nnumber.toString(); или\r\n10..toString();     или\r\n10 .toString();    или\r\n(10).toString();   \r\n\r\nВ то же время проблем с действительными дробными числами не возникает и \r\nзапись может быть такова: \r\n\r\n12.5.toString(); // 12.5 преобразовывается в строку без проблем.\r\n\r\n\r\n\r\n\r\n// javascript number literal to string problem \r\n\r\n/*\r\nnumber\r\nnumber -> string\r\nnumber -> boolean (0, NaN -> false / ALL -> true)\r\n\r\n// const number = 10;\r\n// const string1 = number.toString(); // вернет '10'\r\n// const string2 = String(number);    // вернет '10'\r\n// const string3 = number + '';       // вернет '10'\r\n// const string4 = `${number}`;       // вернет '10'\r\n// const boolean = Boolean(number);   // // вернет true (Boolean)\r\n*/\n/*\r\nstring\r\nstring -> number\r\nstring -> boolean ('' -> false / all other -> true)\r\n\r\n// const string = '10';\r\n// const number1 = Number(string);  // вернет 10 как число.\r\n// const number2 = +string;         // вернет 10 как число.\r\n// const number3 = string / 5;      // вернет 2 как число\r\n// const boolean = Boolean(string); //вернет true как булево значение\r\n*/\n/*\r\nconst a;\r\nString(a);\r\nNumber(a);\r\nBoolean(a);\r\n\r\nundefined -> string -> 'undefined' \r\nundefined -> number -> NaN\r\nundefined -> boolean -> false\r\n*/\n/*\r\nnull -> string -> 'null'\r\nnull -> number -> 0\r\nnull -> boolean -> false\r\n*/\n/*\r\nboolean -> string -> 'true'/'false'\r\nboolean -> number -> 1 / 0\r\n*/\n// HOMETASK 2 - > create a table with all transformations\n// ------\n// WTF JS  ---------------  просмотрено но не осознано )))\n// const a = 10;\n// const b = '10';\n// const c = true;\n// let check1 = '1' == boolean;\n// const check2 = check1 == Boolean(check1); // true\n// const checkToNumber1 = a === Number(b);  // false\n// const checkToString1 = String(a) === b;  // true\n// const checkToNumber2 = a !== Number(b);  // false\n// const checkToString2 = String(a) !== b;  // false\n// const checkToNumber3 = a != Number(b);   // false\n// const checkToString3 = String(a) != b;   // false\n// a === b => true  ???? //false так как ф - число а b - строка!!!!\n// 1 !== 1 => false\n// 1 === 2 => false\n// 1 !== 2 => true\n// if (check1) {\n//   alert('YES, THEY ARE EQUAL!');\n// }\n// if (check2) {\n//   // DO THIS\n// }\n// const a = 10;\n// const b = '10';\n// const equal = a === b; // false\n// // const notEqual = a !== b; // true\n// const notEqual1 = !a; // false\n// const notEqual2 = !b; // false\n// const notEqual3 = !equal; // true\n// const a = !!alert(1); // false\n// const b = !!10; // true\n// const c = !!'10'; // true\n// const d = !!''; // false\n// Boolean(myVariable);\n// const a = !myVar; // true/false\n// const b = !a; // false/true\n// const c = +b; // 0/1\n// const d = (+(!(!myVar)));\n// const string = 'a';\n// const number = Number(string);\n// const a = true || ...; // -> true\n// const c = false && ...; // -> false\n// let arr = [1, 2, 3, 4, 5];\n// let count;\n// for(let item of arr) {\n//   console.log(item);\n// }\n// console.log(arr.length + '  length');\n// let test = function func() {\n//   console.log('!');\n//   test();\n// }\n// test();\n// let obj = {\n//   func1: function() {return 1},\n//   func2: function() {return 2},\n//   func3: function() {return 3},\n//   func4: function() {return 4}\n// };\n// console.log(obj.func1() + obj.func2() + obj.func3() + obj.func4());\n// for(let elem in obj) {\n//   console.log(elem());\n//   let summ = 0;\n//   summ += elem();\n// }\n// let math = {\n//   square: function(num) {return num + num},\n//   cube: function(num) {return (num * num) + (num * num)},\n//   cube1: function(num) {return (num * num* num) + (num * num * num)},\n// };\n// console.log(math.square(2));\n// console.log(math.cube(2));\n// console.log(math.cube1(2));\n// let test = function(func1, func2, func3) {\n// console.log(func1() + func2() + func3());\n// };\n// test(function() {return 1}, function() {return 2}, function() {return 3});\n// let func1 = () => {return 1};\n// let func2 = () => { return 2};\n// let func3 = () => {return 88};\n// let test = (fu1, fu2, fu3) => {\n//   console.log(fu1() + fu2() + fu3());\n// };\n// test(func1, func2, func3);\n// let test =(num, func1, func2) => {\n//   console.log(func1(num) + func2(num));\n// };\n// let f1 = (num) => { return num * num };\n// let f2 = (num) => { return num * num * num};\n// test(3, f1, f2);\n// let test = (arr, func) => {\n//   for(let i = 0; i < arr.length; i++) {\n//     arr[i] = func(arr[i]);\n//   }\n//   return arr\n// };\n// let arr = [3, 4, 5, 6, 7];\n// let f1 = (num) => { return num ** 3};\n// let result = test(arr, f1);\n// console.log(result);\n// let func = (num1, num2) => {\n//   return num1 * num1 + num2 * num2;\n// };\n// console.log(func(2,3));\n// let test =(num1, num2) => {\n//   let square =(num) => {\n//     return num * num\n//   };\n//   return square(num1) + square(num2);\n// };\n// let result = test(4,5);\n// console.log(result);\n/*\r\nСделайте функцию func, которая параметрами будет принимать два \r\nчисла, а возвращать сумму квадрата первого числа с кубом второго числа.\r\n Сделайте для этого вспомогательную функцию square, возводящую число в \r\n квадрат, и вспомогательную функцию cube, возводящую число в куб.\r\n*/\n// let func =(num1, num2) => {\n// let square = (num) => {return num * num};\n// let cube = (num) => {return Math.pow(num, 3)};\n//   return square(num2) + cube(num1);\n// };\n// let result = func(23,3);\n// console.log(result);\n// let func1 = () => {\n//   let func2 =() => {\n//     let func3 = () => {\n//       let func4 = () => {\n//         return '!';\n//       };\n//       return func4;\n//     };\n//     return func3;\n//   };\n//   return func2;\n// };\n// let result = func1()()()();\n// console.log(result);\n// let func1 = (num1) => {\n//   return function(num2) {\n//     return num1 + num2;\n//   }\n// };\n// console.log( func1(4)(5));\n// let func = (num1) => {\n//   return function(num2) {\n//     return function (num3) {\n//       return num1 + num2 + num3;\n//     }\n//   }\n// };\n// console.log(func(2)(3)(4));\n// Сделайте функцию func, которая будучи вызвана вот\n// так: func(2)(3)(4)(5)(), вернет массив переданных в параметры чисел.\n// let func2 = (num1) => {\n//   let arr = [num1];\n//   return function (num2) {\n//     arr.push(num2);\n//     return function (num3) {\n//       arr.push(num3)\n//       return function (num4) {\n//         arr.push(num4);\n//         return arr;\n//       };\n//     };\n//   };\n// };\n// let func1 = (num1) => {\n//   let arr = [num1];\n//   return function (num2) {\n//     arr.push(num2);\n//     return function (num3) {\n//       arr.push(num3);\n//       return function (num4) {\n//         arr.push(num4);\n//         return arr;\n//       };\n//     };\n//   };\n// // };\n// let result = func2(2)(3)(4)(5);\n// console.log(result); // Выведет: [2, 3, 4, 5]\n// function each(arr, callback) {\n//   res = [];\n//   for(let elem of arr) {\n//     res.push(callback(elem));\n//   }\n//   return res;\n// }\n// let all = each(['abc', 'cde', 'fge'], function callback(str) {return str.charAt(0).toUpperCase() + str.slice(1)});\n// console.log(all);\n// let func2 = (num1, num2) => num1 * num2;\n// console.log(func2(2, 8));\n// let func = num => num * num;\n// console.log(func(50));\n// let result = filter([1, 2, 3, 4, 5], function(elem) {\n// \tif (elem > 0) {\n// \t\treturn true;\n// \t} else {\n// \t\treturn false;\n// \t}\n// });\n// let result = filter([1, 2, 3, 4, 5], elem => elem > 0);\n// console.log(result);\n// function test() {\n// \tlet num = 1;\n// \treturn function() {\n// \t\tconsole.log(num);\n// \t}\n// }\n// let func = test();\n// func(); // выведет 1\n// console.log(test()());\n// let counter =() => {\n//   let num = 1;\n//   return function() {\n//     console.log(num);\n//     num++\n//     return num;\n//   }\n// };\n// let res = counter();\n// res();\n// // console.log(res());console.log(res());console.log(res());console.log(res());console.log(res());\n// let countmin = () => {\n//   let num = 10;\n//   let innerCounter = () => {\n//     if( num <= 0) {\n//       console.log('Current count  '  + num);\n//       num--\n//       innerCounter();\n//     } else {\n//       console.log ('All is empty');\n//     }\n//   }\n//   return  innerCounter\n// };\n// let res = countmin();\n// res();\n/*\r\nlet countmin = () => {\r\n  let num = 10;\r\n  let innerCounter = () => {\r\n    if (num > 0) {\r\n      console.log('Current count:', num);\r\n      num--;\r\n      innerCounter(); // Рекурсивный вызов innerCounter\r\n    } else {\r\n      console.log('All is empty');\r\n    }\r\n  };\r\n\r\n  return innerCounter;\r\n};\r\n\r\nlet res = countmin();\r\nres(); // Вызывает цикл, выводя текущий счетчик от 10 до 1\r\n// // Теперь код будет выполнять цикл и выводить текущее значение счетчика до тех пор, пока num не станет меньше или равным 0, после чего будет выведено 'All is empty'.\r\n\r\n*/\n//  ЗАМЫКАНИЯ\n// let counter = 0;\n// function test() {\n// \treturn function() {\n// \t\tconsole.log(counter);\n// \t\tcounter++;\n// \t};\n// }\n// let func = test;\n// let func1 = func();\n// let func2 = func();\n// func1();\n// func2();\n// func1();\n// func2()\n// // let res = (() => {\n// //   return (num1) => {\n// //     return (num2) => {\n// //       let sum = num1 + num2;\n// //       return sum;\n// //     }\n// //   }\n// // }) ()(1)(2);\n// function curryAdd(x) {\n//   return function(y) {\n//     return function(z) {\n//       return x + y + z;\n//     };\n//   };\n// }\n// // / Использование функции без каррирования\n// // let resultWithoutCurry = add(1, 2, 3);\n// // console.log(resultWithoutCurry); // Выведет 6\n// // Использование функции с каррированием\n// let curryAddResult = curryAdd(1)(2)(3);\n// console.log(curryAddResult); // Выведет 6\n/*\r\n\r\n\r\nВ JavaScript существует несколько способов создания массива. Вот несколько из них:\r\n\r\nЛитерал массива:\r\n\r\njavascript\r\nCopy code\r\nconst array1 = [1, 2, 3, 4, 5];\r\nС использованием конструктора Array:\r\n\r\njavascript\r\nCopy code\r\nconst array2 = new Array(1, 2, 3, 4, 5);\r\nС использованием Array.from():\r\n\r\njavascript\r\nCopy code\r\nconst array3 = Array.from([1, 2, 3, 4, 5]);\r\nС использованием Array.of():\r\n\r\njavascript\r\nCopy code\r\nconst array4 = Array.of(1, 2, 3, 4, 5);\r\nС использованием Array() без аргументов (пустой массив):\r\n\r\njavascript\r\nCopy code\r\nconst emptyArray = Array();\r\nС использованием расширенного синтаксиса:\r\n\r\njavascript\r\nCopy code\r\nconst array5 = [...[1, 2, 3, 4, 5]];\r\nС использованием метода push():\r\n\r\njavascript\r\nCopy code\r\nconst array6 = [];\r\narray6.push(1, 2, 3, 4, 5);\r\nС использованием метода concat():\r\n\r\njavascript\r\nCopy code\r\nconst array7 = [].concat(1, 2, 3, 4, 5);\r\n*/\n/*\r\nconst array1 = [1, 2, 3, 4];\r\n\r\n// 0 + 1 + 2 + 3 + 4\r\nconst initialValue = 0;\r\nconst sumWithInitial = array1.reduce(\r\n  (accumulator, currentValue) => accumulator + currentValue,\r\n  initialValue,\r\n);\r\n\r\nconsole.log(sumWithInitial);\r\n// Expected output: 10\r\n\r\n*/\n// let arr = [1, 2, 3, 4, 5, 6, 7, 8];\n// arr.forEach(function(element) {\n//   console.log(element);\n// });\n// arr.forEach(function(element, index, arr) {\n//   numberOfElement = element * 7;\n//   console.log(`Элемент ${numberOfElement} имеет индекс ${index} в массиве [${arr}]`);\n// });\n// // Выводит 1, 2,\n// console.log(arr);\n// let squaredArr = arr.map(function(element) {\n//   return element * element;\n// });\n// console.log(squaredArr);\n// let arr0 = [1, 2, 3, 4, 5];\n// let arr1 = 'sdfsdfsdf';\n// console.log(arr0.at(-1))\n// let obj = {x: 1, y: 2, z: 3};\n// console.log( typeof obj['x'] );\n// const arr111 = ['a', 'b', 'c'];\n// arr111 = ['a', 'b', 'c'];\n// console.log(arr111);\n// let number = 1;\n// const doubleObj = {\n//   set x(value) {\n//     number = value;\n//   },\n//   get x() {\n//     return number * 2;\n//   },\n//   y() {\n//     return number * 2;\n//   },\n//   setX(value) {\n//     number = value;\n//   },\n//   getX() {\n//     return number;\n//   },\n// };\n// console.log(doubleObj.x); // Выведет: 2\n// console.log(doubleObj.y()); // Выведет: 2\n// doubleObj.x = 10;\n// doubleObj.setX(10);\n// console.log(doubleObj.x); // Выведет: 20\n// console.log(doubleObj.getX()); // Выведет: 10\n// let number = 1;\n// let obj = {\n//   set x(value) {\n//   number = value;\n//   },\n//   get x() {\n//     return number;\n//   }\n// };\n// obj.x = 20;\n// console.log(obj.x)\n// (function(){\n// let f = function() {\n//   return this.number ;\n// };\n// let obj1 = {\n//   number: 18,\n//   method: f,\n// };\n// let obj2 = {\n//   number: 28,\n//   method: f,\n// };\n// console.log(obj1.method());\n// console.log(obj2.method());\n// }());\n// class Users {\n//   #name;\n//   #sur;\n//   #age;\n//   constructor(name, sur, age) {\n//     this.#name = name;\n//     this.#sur = sur;\n//     this.#age = age;\n//   }\n//   setAge(newAge) {\n//     this.#age = newAge;\n//     return this;\n//   }\n//   setName(newName) {\n//     this.#name = newName;\n//     return this;\n//   }\n//   setSur(newSur) {\n//     this.#sur = newSur;\n//     return this;\n//   }\n//   getAge() {\n//     return this.#age;\n//   }\n//   getName() {\n//     return this.#name;\n//   }\n//   getSur() {\n//     return this.#sur;\n//   }\n// };\n// let user = new Users(\"Bill\", \"Davidson\", 89);\n// console.log(user);\n// console.log(user.Name);\n// user.setName('Gregory').setSur('Stivenson').setAge(68);\n// console.log(user.getName());\n// console.log(user instanceof Users);\nvar Student = /*#__PURE__*/_createClass(function Student(name) {\n  _classCallCheck(this, Student);\n  this.name = name;\n}); // class Employee {\n// \tconstructor(name) {\n// \t\tthis.name = name;\n// \t}\n// }\n// let users = [\n// \tnew Student('user1'),\n// \tnew Employee('user2'),\n// \tnew Student('user3'),\n// \tnew Employee('user4'),\n// \tnew Student('user5'),\n// \tnew Employee('user6'),\n// \tnew Student('user7'),\n// ];\n//  let studentsNames = [];\n//   let employees = [];\n// for (let i = 0; i <= users.length - 1; i++) {\n//   if(users[i] instanceof Student) {\n//     studentsNames.push(users[i].name);\n//   } else if( users [i] instanceof Employee) {\n//     employees.push(users[i].name);\n//   }\n//   // console.log(employees);\n// };\n// console.log(\"Students: \", studentsNames);\n// console.log(\"Employees: \", employees);\n// class HelperArray {\n//   getSum(arr) {\n//     let sum = 0;\n//     for(let elem of arr) {\n//       sum += elem;\n//     }\n//     return sum;\n//   }\n//   getArrithm(arr) {\n//     if(arr.length >0) {\n//       let sum = this.getSum(arr);\n//       return sum / arr.length;\n//     }else {\n//       return 0;\n//     }\n//   }\n// };\n// let arrHelper = new HelperArray();\n// let sum1 = arrHelper.getSum([4,5,6]);\n// console.log(sum1);\n// let r = arrHelper.getArrithm([4,5,6]);\n// console.log(r);\n// class City {\n//   nameOfCity;\n//   constructor(nameOfCity) {\n//     this.nameOfCity = nameOfCity;\n//   }\n// };\n// class Users {\n//   name;\n//   age;\n//   city;\n//   constructor(name, age, city) {\n//     this.name = name;\n//     this.age = age;\n//     this.city = city;\n//   }\n// };\n// let cityName = new City('London');\n// let user = new Users ('Mike', 60, cityName);\n// console.log(user.city.nameOfCity);\n// class Employee {\n// \tconstructor(name, position, department) {\n// \t\tthis.name = name;\n// \t\tthis.position = position;\n// \t\tthis.department = department;\n// \t}\n// };\n// class Departments {\n//   department;\n//   constructor(department) {\n//     this.department = department;\n//   }\n// };\n// class Positions {\n//   pos = 'manager';\n//   constructor(pos) {\n//     this.pos = pos;\n//   }\n// };\n// let newPosition = new Positions('Cheaf');\n// let newDepartment = new Departments('Logistic');\n// let worker = new Employee('Bill', newPosition.pos, newDepartment.department);\n// console.log(worker.name);\n// console.log(worker.position);\n// console.log(worker);\n// class Employee {\n//   #name;\n//   #salary;\n//   constructor(name, salary) {\n//     this.#name = name;\n//     this.#salary = salary;\n//   }\n//   getName() {\n//     return this.#name;\n//   }\n//   getSalary() {\n//     return this.#salary;\n//   }\n// };\n// let employee = [\n//   new Employee('Gregory', 90),\n//   new Employee('Kollins', 100),\n//   new Employee('Thomas', 120),\n//   new Employee('Henry', 400),\n// ];\n// for(let employee of employee) {\n//   console.log(employee.getName(), employee.getSalary());\n// }\n// class User {\n//   showName() {\n//     return this.cape(this.name)\n//   }\n//   showSur() {\n//     return this.cape(this.sur);\n//   }\n//   cape(elem) {\n//     return elem[0].toUpperCase() + elem.slice(1);\n//   }\n// };\n// let user = new User;\n// user.name = 'naomi';\n// user.sur = 'campbell';\n// // console.log(user.name);\n// console.log(user.showName(), user.showSur());\n// class Students {\n//   showLetterName() {\n//     return this.showCap(this.name);\n//   }\n//   showLetterSurn() {\n//     return this.showCap(this.surn);\n//   }\n//   firstLetterName() {\n//     return this.charToUpper(this.name);\n//   }\n//   firstLetterSur() {\n//     return this.charToUpper(this.surn);\n//   }\n//   showCap(str) {\n//     return str[0].toUpperCase() +  str.slice(1);\n//   }\n//   charToUpper(char) {\n//     return char.charAt(0).toUpperCase();\n//   }\n// }\n// let user = new Students();\n// user.name = \"mike\";\n// user.surn = \"davidson\";\n// console.log(user.showLetterName()); // Выведет \"Mike\"\n// console.log(user.showLetterSurn()); // Выведет \"Davidson\"\n// console.log(user.firstLetterName(), user.firstLetterSur());\n// class Usres {\n//   constructor(name, surn) {\n//     this.name = name;\n//     this.surn = surn;\n//   }\n//   show() {\n//     return this.name + '  ' + this.surn;\n//   }\n// };\n// let user = new Usres('Billy', 'Douel');\n// console.log(user.name);\n// console.log(user.surn);\n// console.log(user.show());\n// class Users {\n//   #name;\n//   #surn;\n//   constructor(name, surn) {\n//     this.#name = name;\n//     this.#surn = surn;\n//   }\n//   set Name(name) {\n//     return  this.name = name;\n//   }\n//   get Name() {\n//     return this.name\n//   }\n//   showUser(){\n//     console.log(this.#Cap(this.name) + ' sdfsdfsdfsdf' + this.#Cap(this.surn))\n//   }\n//   #Cap(str) {\n//     return str[0].toUpperCase() + str.slice(1);\n//   }\n// };\n// let user = new Users();\n// user.name = \"bill\" ;\n// user.surn = 'klinton';\n// console.log(user.name, user.surn);\n// console.log(user.showUser());\n// class Employee {\n// \tconstructor(name, salary) {\n// \t\tthis.name = name;\n// \t\tthis.salary = salary;\n// \t}\n// \tgetSalary() {\n// \t\treturn this.#addSign(this.salary);\n// \t}\n// \t#addSign(num) {\n// \t\treturn num + '$';\n// \t}\n// };\n// let worker = new Employee('John', 1500);\n// console.log(worker.name);\n// console.log(worker.salary);\n// console.log(worker.getSalary());\n/*\r\nclass Horses {\r\n  #weight;\r\n  #name;\r\n  #costs;\r\n  constructor(weight, name, costs) {\r\n    this.#weight = weight;\r\n    this.#name = name;\r\n    this.#costs = costs;\r\n  }\r\n  set Weight(weight) {\r\n    this.#weight = weight;\r\n  }\r\n  set Name(name) {\r\n    if (name.length > 3) {\r\n      this.#name = name;\r\n    } else {\r\n      console.log(\"Small name\");\r\n    }\r\n    this.#name = name;\r\n  }\r\n  set Costs(costs) {\r\n    this.#costs = costs;\r\n  }\r\n  get Weight() {\r\n    return this.#weight;\r\n  }\r\n  get Name() {\r\n    return this.#name;\r\n  }\r\n  get Costs() {\r\n    return this.#costs;\r\n  }\r\n  addToStado() {\r\n    if (!stado.some((horse) => horse.name === this.#name)) {\r\n      stado.push({\r\n        name: this.#name,\r\n        weight: this.#weight,\r\n        costs: this.#costs,\r\n      });\r\n      console.log(`Added to stado ${this.#name}`);\r\n    } else {\r\n      console.log(`The kon whith name ${this.#name} is alredy in STADO`);\r\n    }\r\n  }\r\n};\r\n\r\nlet kon = new Horses(450, \"Va\", 4500);\r\n\r\nlet stado = [];\r\n\r\nconsole.log(kon.Name);\r\nconsole.log(kon.addToStado());\r\nconsole.log(stado);\r\nkon.Name = 'Na';\r\n\r\n//  if (!stado.some(horse => horse.Name === this.#name)) {\r\n//   stado.push({ name: this.#name, weight: this.#weight, costs: this.#costs });\r\n//   console.log(`${this.#name} добавлена в стадо.`);\r\n// } else {\r\n//   console.log(`${this.#name} уже есть в стаде.`);\r\n// }\r\n*/\n// class User {\n// \t#name;\n// \t#surn;\n// \tsetName(name) {\n// \t\tthis.#name = name;\n// \t\treturn this;\n// \t}\n// \tsetSurn(surn) {\n// \t\tthis.#surn = surn;\n// \t\treturn this;\n// \t}\n// \tget Name() {\n// \t\treturn this.#name;\n// \t}\n// \tget Surn() {\n// \t\treturn this.#surn;\n// \t}\n// };\n// let user = new User;\n// user.Name = 'John';\n// user.Surn = 'Smith';\n// user.Name = ('Piter').Surn = ('Forest');\n// user.setName('John').setSurn('Smith');\n// console.log(user.Name);\n// console.log(user.Surn);\n// user.setName('Piter').setSurn('Forest');\n// console.log(user.Name);\n// console.log(user.Surn);\n// class User {\n// };\n// class Trust {\n// }\n// let trust = new Trust();\n// let user = new User();\n// console.log(user instanceof User);\n// console.log(trust instanceof User);\n// class Student1 {\n// \tconstructor(name) {\n// \t\tthis.name = name;\n// \t}\n// }\n// class Employee {\n// \tconstructor(name) {\n// \t\tthis.name = name;\n// \t}\n// }\n// let users = [\n// \tnew Student1('user1'),\n// \tnew Employee('user2'),\n// \tnew Student1('user3'),\n// \tnew Employee('user4'),\n// \tnew Student1('user5'),\n// \tnew Employee('user6'),\n// \tnew Student1('user7'),\n// ];\n// let nameOfStudents = [];\n// let nameOfEmployee = [];\n// for(let elem of users) {\n//   if(elem instanceof Student1) {\n//     nameOfStudents.push(elem.name)\n//   } else{\n//     nameOfEmployee.push(elem.name)\n//   }\n// };\n// console.log(nameOfEmployee);\n// console.log(nameOfStudents);\n/*\r\nclass arrayHelper {\r\n  array;\r\n  summ = 0;\r\n  middle = 0;\r\n  constructor(array) {\r\n    this.array = array;\r\n  }\r\n  summOfArray() {\r\n    this.summ = 0;\r\n    for (let elem of this.array) {\r\n      this.summ += elem;\r\n    }\r\n    return this.summ;\r\n  }\r\n  middleOfArray() {\r\n    return this.array.length > 0 ? this.summOfArray() / this.array.length : 0;\r\n  }\r\n}\r\n\r\nlet myArray = [1, 2, 3, 4, 5, 6, 7];\r\n\r\nlet arrayToCalc = new arrayHelper(myArray);\r\n\r\nconsole.log(arrayToCalc.summOfArray());\r\nconsole.log(arrayToCalc.middleOfArray());\r\n*/\n/*\r\nclass String {\r\n  str;\r\n  constructor(str) {\r\n    this.str = str;\r\n    console.log(str)\r\n  }\r\n  strToCheck() {\r\n\r\n    let res = this.str.replace(/\\s/g, '');\r\n\r\n    if (res === \"\") {\r\n      return \"The string is empty\";\r\n    } else {\r\n      return res;\r\n    }\r\n  }\r\n};\r\nlet string  = '         Привет   привет П р и в е т.       ';\r\n\r\nlet stringCheck = new String(string);\r\n\r\nconsole.log(stringCheck.strToCheck());\r\n\r\nlet trimmed  = string.trim();\r\nconsole.log(trimmed);\r\n*/\n/*\r\nfunction isEmail(str) {\r\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(str);\r\n}\r\n\r\n// Пример использования:\r\nlet email = \"example@email.com\";\r\nif (isEmail(email)) {\r\n  console.log(\"Верный формат email\");\r\n} else {\r\n  console.log(\"Неверный формат email\");\r\n}\r\n*/\n/*\r\n  class Checkmail {\r\n    mail;\r\n    constructor (mail) {\r\n      this.mail = mail;\r\n    }\r\n    isMail() {\r\n      if(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(this.mail)) {\r\n        console.log(`The mail is OK`);\r\n      }else {\r\n        console.log(`The mail is not OK`)\r\n      }\r\n    }\r\n  };\r\n\r\n\r\nlet mail1 = 'jndjfn@google.com';\r\n\r\nlet myMail = new Checkmail (mail1);\r\n\r\nconsole.log(myMail.isMail());\r\n*/\n// class Domain {\n//   domian;\n//   constructor(domian) {\n//     this.domian = domian;\n//   }\n//   checkDomian() {\n//     if( /^[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(this.domian)){\n//       return this.domian;\n//     }else{\n//       return `Its not OK`;\n//     }\n//   }\n// };\n// let dom = 'google.com';\n// let dom1 = 'sdlfjsldkfjs';\n// let chkDom = new Domain(dom1);\n// console.log(chkDom.checkDomian());\n/*\r\nconst person = {\r\n  name : {\r\n    first: 'Bob',\r\n    last: 'Smith'\r\n  },\r\n  \r\n  age: 32,\r\n  gender: \"male\",\r\n  interests: [\"music\", \"skiing\"],\r\n  bio: function () {\r\n    alert(\r\n      this.name.first +\r\n        \" \" +\r\n        this.name.last +\r\n        \" is \" +\r\n        this.age +\r\n        \" years old. He likes \" +\r\n        this.interests[0] +\r\n        \" and \" +\r\n        this.interests[1] +\r\n        \".\",\r\n    );\r\n  },\r\n  greeting: function () {\r\n    alert(\"Hi! I'm \" + this.person.name.last + \".\");\r\n  },\r\n};\r\nconsole.log (person.name.first);\r\nlet myDataName = \"height\";\r\nlet myDataValue = \"1.75m\";\r\nperson[myDataName] = myDataValue;\r\nconsole.log(person.height);\r\n// console.log(person.bio());\r\n\r\nmyData = \"weight\";\r\nmyValue = '765 kg';\r\nperson[myData] = myValue;\r\nconsole.log(person.weight);\r\n\r\n*/\n// class CityName {\n//   name;\n//   constructor(name) {\n//     this.name = name;\n//   }\n// };\n// class Users {\n//   userName;\n//   userSur;\n//   userAge;\n//   city;\n//   constructor(userName, userSur, userAge, city1) {\n//     this.userName = userName;\n//     this.userSur = userSur;\n//     this.userAge = userAge;\n//     this.city1 = city1;\n//   }\n// };\n// let city = new CityName ('London');\n// let user = new Users('Piter', 'Pan', 58, city);\n// console.log(user.userName);\n// console.log(user.city1.name);\n// class City {\n// \tconstructor(name) {\n// \t\tthis.name = name;\n// \t}\n// }\n// class User {\n// \tconstructor(name, surn, city1) {\n// \t\tthis.name = name;\n// \t\tthis.surn = surn;\n// \t\tthis.city1 = city1;\n// \t}\n// }\n// let city = new City('luis');\n// let user = new User('john', 'smit', city);\n// console.log(user.name);\n// console.log(user.city1.name);\n/*\r\nclass Employee {\r\n  constructor(name, position, department) {\r\n    this.name = name;\r\n    this.position = position;\r\n    this.department = department;\r\n  }\r\n}\r\nclass workPosition {\r\n  constructor(pos) {\r\n    this.pos = pos;\r\n  }\r\n};\r\nclass Department {\r\n  constructor(dep) {\r\n    this.dep = dep;\r\n  }\r\n}\r\nlet posNew = new workPosition('cheaf');\r\nlet depNew = new Department('logistic');\r\nlet newWorker = new Employee('newMann', posNew, depNew);\r\n\r\n// console.log(newWorker.name);\r\n// console.log(newWorker.position.pos,);\r\n// console.log(newWorker.department.dep);\r\n*/\n/*\r\nclass Worker {\r\n  constructor( name, posada, department,) {\r\n    this.name = name; \r\n    this.posada = posada;\r\n    this.department = department;\r\n  }\r\n};\r\n\r\nlet workerNew = new Worker(newWorker, posNew, depNew);\r\nconsole.log(workerNew.name.name);\r\nconsole.log(workerNew.posada.pos);\r\nconsole.log(workerNew.department.dep);\r\n*/\n/*\r\nclass Psarnia {\r\n  name;\r\n  waga;\r\n \r\n  constructor(name, waga) {\r\n    this.name = name;\r\n    this.waga = waga;\r\n  }\r\n  getName() {\r\n    return this.name;\r\n  }\r\n  getWaga() {\r\n    return this.waga;\r\n  }\r\n};\r\n\r\nlet psy = [\r\n  new Psarnia('gru', 15),\r\n  new Psarnia('fnu', 18),\r\n  new Psarnia('resp', 20)\r\n];\r\nlet psyNames = [];\r\nlet psyWaga = [];\r\nfor(let item of psy) {\r\n    psyNames.push(item.getName());\r\n    psyWaga.push(item.getWaga());\r\n  };\r\n  console.log(psyNames);\r\n  console.log(psyWaga);\r\n*/\n// class User {\n//   name;\n//   constructor(name) {\n//     this.name = name;\n//   }\n//   getName() {\n//     return this.name;\n//   }\n// }\n// class UsersCollection {\n//   constructor() {\n//     this.users = [];\n//   }\n//   add(user) {\n//     this.users.push(user);\n//   }\n//   showUsers() {\n//     for (let item of this.users) {\n//       console.log(item.getName());\n//     }\n//   }\n// }\n// let uc = new UsersCollection();\n// uc.add(new User('Bob'));\n// uc.add(new User('Bill'));\n// uc.add(new User('Iwona'));\n// console.log(uc);\n// uc.showUsers();\n/*\r\n\r\nclass Worker {\r\n  constructor(name) {\r\n    this.name = name;\r\n  }\r\n  get Name() {\r\n    return this.name;\r\n  }\r\n};\r\n\r\n\r\nclass WorkerCollection {\r\n  workers;\r\n  constructor() {\r\n    this.workers = [];\r\n  }\r\n  addWorker(worker) {\r\n    this.workers.push(worker);\r\n  }\r\n\r\n  showName() {\r\n    for (let worker of this.workers) {\r\n    console.log(worker.Name);\r\n    }\r\n  }\r\n  // showPosition() {\r\n  //   for (let human of this.workersPosition) {\r\n  //   console.log(human.get.Name);\r\n  //   }\r\n  \r\n};\r\n\r\n\r\nlet workerCollection = new WorkerCollection();\r\n\r\nlet workers = [\r\nworkerCollection.addWorker(new Worker('Billy')),\r\nworkerCollection.addWorker(new Worker('Mike')),\r\nworkerCollection.addWorker(new Worker('Billy')),\r\n];\r\n\r\n\r\nworkerCollection.showName();\r\n*/\n// console.log('sdsdfsdfsdf');\n// class MyObject() {\n//   // Конструктор объекта\n// }\n// // Добавление метода через прототип\n// MyObject.prototype.myMethod = function() {\n//   console.log(\"This is my method\");\n// };\n// let myInstance = new MyObject();\n// myInstance.myMethod();\n/*\r\nclass MathOperation {\r\na;\r\nb;\r\nconstructor() {\r\n\r\n}\r\n};\r\n\r\nMathOperation.prototype.add = function(a,b) {\r\n  let c = a + b;\r\n  return c;\r\n};\r\n\r\nMathOperation.prototype.subs= function (a,b) {\r\n  return a - b;\r\n};\r\ndebugger;\r\nlet calculator1 = new MathOperation();\r\nconsole.log(calculator1.add(3,5));\r\nlet calculator2 = new MathOperation();\r\nconsole.log(calculator2.subs(50, 59));\r\nwindow.print()\r\n\r\n*/\n// var str = \"я учусь и мне нравится учиться\";\n// // console.log(str.endsWith(\"учиться\")); // true\n// // console.log(Number(str.endsWith(\"Я\", 1))); // false\n// // console.log(str.endsWith(\"Бы\", 3)); // true\n// // console.log(str.includes('Я'));\n// // console.log(str.includes('мне'));\n// let a = str.at(15);\n// let b = str.at(2);\n// console.log(`${a}`);// возвратит \"Яу\"\n// let index = 3;\n// console.log(str.charAt(index)); // 'ч'\n// let substr = 'нравится';\n// console.log(str.includes(substr)); //  true;\n// console.log(Number(str.includes(substr))); //  1\n// let indexOf = 'р';\n// console.log(str.length - 1);\n// console.log(str.indexOf(indexOf)); // 15\n// console.log(str.at(15) == str.indexOf(indexOf)); // p !=== 15 false\n// console.log(str.lastIndexOf('я')); // 29\n// // \"абв\".repeat(-1); // RangeError\n// // \"абв\".repeat(0); // ''\n// // \"абв\".repeat(1); // 'абв'\n// // \"абв\".repeat(2); // 'абвабв'\n// // \"абв\".repeat(3.5); // 'абвабвабв' (количество будет преобразовано в целое число)\n// // \"абв\".repeat(1 / 0); // RangeError\n// let re = /учиться|учусь/gi; //\n// let newstr = str.replace(re, 'изучать' );\n// console.log(newstr);\n// const paragraph = \"I think Ruth's dog is cuter than your dog!\";\n// console.log(paragraph.replaceAll('dog', 'monkey'));\n// // Expected output: \"I think Ruth's monkey is cuter than your monkey!\"\n// // Global flag required when calling replaceAll with regex\n// const regex = /Dog/gi;\n// console.log(paragraph.replaceAll(regex, 'ferret'));\n// // Expected output: \"I think Ruth's ferret is cuter than your ferret!\"\n// var testString = \"hey JuDe\";\n// var reg = 'J';\n// let g = testString.search(reg,);\n// console.log(g);\n// ; // выведет: hey Jude содержит /[A-Z]/g\n// class User {\n//   name;\n//   surn;\n//   constructor(name, surn) {\n//     this.name = name;\n//     this.surn = surn;\n//   }\n//   setName(name) {\n//     this.name = name;\n//   }\n//   getName() {\n//     return this.name;\n//   }\n//   setSurn(surn) {\n//     this.surn = surn;\n//   }\n//   getSurn() {\n//     return this.surn;\n//   }\n// };\n// class Employee extends User {\n//   constructor (name, surn, age) {\n//     super(name, surn);\n//     this.age = age;\n//   }\n//   setAge(age) {\n//     this.age = age;\n//   }\n//   getAge() {\n//     return this.age;\n//   }\n//   setName(name) {\n//     if(name.length > 0) {\n//       super.setName(name);\n//     } else{\n//       throw new Error (\"the name is short\");\n//     }\n//   }\n//   setAge(age) {\n//     if(age > 18 && age< 65) {\n//       this.age = age;\n//     } else {\n//       throw new Error(\"you are too young\");\n//     }\n//   }\n// };\n// let worker = new Employee('Billy', 'Douell', 58);\n// console.log(worker.getName());\n// console.log(worker.getSurn());\n// console.log(worker.getAge());\n// // , getSurn(), getAge());\n// class User {\n//   age;\n//   constructor(age) {\n//     this.age = age;\n//   }\n//   setAge(age) {\n//     if (age >= 0) {\n//       this.age = age;\n//     } else {\n//       throw new Error('need age more 0');\n//     }\n//   }\n//   getAge() {\n//     return this.age;\n//   }\n// }\n// class Employee extends User {\n//   constructor(age) {\n//     super(age);\n//   }\n//   setAge(age) {\n//     if (age > 0) {\n//       if (age <= 120) {\n//         super.setAge(age);\n//       } else {\n//         throw new Error('need age less 120');\n//       }\n//     } else {\n//       throw new Error('need age more 0');\n//     }\n//   }\n// }\n// let worker = new Employee(25);\n// try {\n//   worker.setAge(100);\n//   console.log(worker.getAge());\n// } catch (error) {\n//   console.error(error.message);\n// }\n// class User {\n//   name;\n//   constructor(name) {\n//     this.name = name;\n//   }\n//   setName(name) {\n//     this.name = name;\n//   }\n//   getName() {\n//     return this.name;\n//   }\n//   capeFirst(str) {\n//     return str[0].toUpperCase() + str.slice(1);\n//   }\n// };\n// class Employee extends User {\n//   surn;\n//   age;\n//   constructor(surn, age, name) {\n//     super(name);\n//     this.surn = surn;\n//     this.age = age;\n//   }\n//   setSurn(surn) {\n//     this.surn = surn;\n//   }\n//   getSurn(){\n//     return this.surn;\n//   }\n//   getSurn1() {\n//     return this.capeFirst(this.surn);\n//   }\n// };\n// let worker = new Employee();\n// worker.setSurn('douell');\n// console.log(worker.getSurn());\n// console.log(worker.getSurn1());\n/*\r\nclass User {\r\n\t#name;\r\n\t#surn;\r\n\t\r\n\tsetName(name) {\r\n\t\tthis.#name = name;\r\n\t}\r\n\tgetName() {\r\n\t\treturn this.#name;\r\n\t}\r\n\t\r\n\tsetSurn(surn) {\r\n\t\tthis.#surn = surn;\r\n\t}\r\n\tgetSurn() {\r\n\t\treturn this.#surn;\r\n\t}\r\n};\r\n\r\nclass Boy extends User {\r\n  constructor(#name, #surn) {\r\n    super(#name,#surn);\r\n  }\r\n  getFull() {\r\n    return this.#name + ' ' + this.#surn;\r\n  }\r\n\r\n};\r\nlet worker = new Boy();\r\nworker.setName('Mike');\r\nconsole.log(worker.getName())\r\n*/\n// class User {\n//   #name;\n//   #surn;\n//   setName(name) {\n//     this.#name = name;\n//   }\n//   getName() {\n//     return this.#name;\n//   }\n//   setSurn(surn) {\n//     this.#surn = surn;\n//   }\n//   getSurn() {\n//     return this.#surn;\n//   }\n// }\n// class Boy extends User {\n//   constructor(name, surn) {\n//     super();\n//     this.setName(name);\n//     this.setSurn(surn);\n//   }\n//   getFull() {\n//     return this.getName() + ' ' + this.getSurn();\n//   }\n// }\n// let worker = new Boy();\n// worker.setName('Mike');\n// worker.setSurn('Doe');\n// console.log(worker.getFull()); // Output: Mike Doe\n// class User {\n//   #name;\n//   constructor(name) {\n//     this.#name = name;\n//   }\n//   setName(name) {\n//     this.#name = name;\n//   }\n//   getName() {\n//     return this.#name;\n//   }\n// };\n// class worker extends User {\n//   constructor(name) {\n//     super(name);\n//   }\n//   getFull() {\n//     return this.getName();\n//   }\n// };\n// let boy = new worker();\n// boy.setName('Mike');\n// console.log(boy.getFull());\n// class User {\n//   #name;\n//   constructor(name) {\n//     this.#name = name;\n//   }\n//   setName(name) {\n//     this.#name = name;\n//   }\n//   getName() {\n//     return this.#name;\n//   }\n// }\n// class Worker extends User {\n//   constructor(name) {\n//     super(name);\n//   }\n//   getFull() {\n//     return this.getName();\n//   }\n// }\n// let boy = new Worker('Mike');\n// console.log(boy.getFull());\n/*\r\nclass User {\r\n  #age;\r\n  setAge(age) {\r\n    this.#age = age;\r\n  }\r\n  getAge() {\r\n    return this.#age;\r\n  }\r\n};\r\n\r\nclass User1 extends User {\r\n\r\n  addAge() {\r\n    this.setAge(this.getAge() + 1);\r\n  }\r\n};\r\n\r\nlet newMann = new User1();\r\nnewMann.setAge(58);\r\nconsole.log(newMann.getAge());\r\nnewMann.addAge();\r\nconsole.log(newMann.getAge());\r\n*/\n/*\r\nclass User {\r\n\t#name;\r\n\t\r\n\tsetName(name) {\r\n\t\tthis.#name = name;\r\n\t}\r\n\tgetName() {\r\n\t\treturn this.#name;\r\n\t}\r\n}\r\n\r\nclass Employee extends User {\r\n\tsetName(name) {\r\n\t\tif (name.length > 0) {\r\n\t\t\tthis.super.setName(name) \r\n\t\t}\r\n\t}\r\n}\r\n*/\n/*\r\nclass User {\r\n\tsetName(name) {\r\n\t\tif (this.notEmpty(name)) {\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t}\r\n\tgetName() {\r\n\t\treturn this.name;\r\n\t}\r\n\t\r\n\t_notEmpty(str) {\r\n\t\treturn str.length > 0;\r\n\t}\r\n}\r\nclass Employee extends User {\r\n\tsetSurn(surn) {\r\n\t\tif (this._notEmpty(surn)) {\r\n\t\t\tthis.surn = surn;\r\n\t\t}\r\n\t}\r\n\tgetSurn() {\r\n\t\treturn this.surn;\r\n\t}\r\n}\r\n*/\n/*\r\nclass User {\r\n\t_name;\r\n\t\r\n\tsetName(name) {\r\n\t\tthis._name = name;\r\n\t}\r\n\tgetName() {\r\n\t\treturn this._name;\r\n\t}\r\n}\r\n\r\nclass Employee extends User {\r\n\tsetName(name) {\r\n\t\tif (_name.length > 0) {\r\n\t\t\tthis._name = name;\r\n\t\t}\r\n\t}\r\n}\r\n*/\n// class User {\n// \tsetName(name) {\n// \t\tthis._name = name;\n// \t}\n// \tgetName() {\n// \t\treturn this._name;\n// \t}\n// };\n// class Student1 extends User {\n// \tsetYear(year) {\n// \t\tthis._year = year;\n// \t}\n// \tgetYear() {\n// \t\treturn this._year;\n// \t}\n// };\n// class StudentProgrammer extends Student1 {\n// \tsetSkill(skill) {\n// \t\tthis._skill = skill;\n// \t}\n// \tgetSkill() {\n// \t\treturn this._skill;\n// \t}\n// };\n// let boy = new StudentProgrammer();\n// boy.setSkill(12);\n// console.log(boy.getSkill());\n// boy.setName('Mike');\n// console.log(boy.getName());\n// boy.setYear(34);\n// console.log(boy.getYear());\n/*\r\nclass User {\r\n  name;\r\n  setName(name) {\r\n    this.name = name;\r\n  }\r\n  getName() {\r\n    return this.name;\r\n  }\r\n  CorStr(str) {\r\n    return str[0].toUpperCase() + str.slice(1);\r\n  }\r\n}\r\nclass Employee extends User {\r\n  salary;\r\n  setSalary(salary) {\r\n    this.salary = salary;\r\n  }\r\n  getSalary() {\r\n    return this.salary;\r\n  }\r\n  addSalary(salary, adds = 100) {\r\n    let newSalary = salary + adds;\r\n    return newSalary\r\n  }\r\n}\r\n\r\nclass Programmer extends Employee {\r\n  position;\r\n  setPos(position) {\r\n    this.position = position;\r\n  }\r\n  getPos() {\r\n    return this.position;\r\n  }\r\n}\r\n\r\nclass Designer extends Programmer {\r\n  skill;\r\n  setSkill(skill) {\r\n    this.skill = skill;\r\n  }\r\n  getSkill() {\r\n    return this.skill;\r\n  }\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\nlet user = new Designer();\r\nuser.setSkill(4);\r\nconsole.log(user.getSkill());\r\nuser.setPos('junior');\r\nuser.setSalary(2000);\r\nuser.setName('Mike');\r\n\r\nconsole.log(user.getSkill(), user.getPos(), user.getSalary(), user.getName());\r\nconsole.log(user.addSalary(user.getSalary()));\r\nconsole.log(user.CorStr(user.getPos()));\r\n*/\n// let elem = document.querySelector('p');\n// console.dir(elem);\n// let elem = document.querySelector('div');\n// console.dir(elem);\nvar _name = /*#__PURE__*/new WeakMap();\nvar User = /*#__PURE__*/function () {\n  function User(name) {\n    _classCallCheck(this, User);\n    _classPrivateFieldInitSpec(this, _name, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _name, name);\n  }\n  _createClass(User, [{\n    key: \"getName\",\n    value: function getName() {\n      return _classPrivateFieldGet(this, _name);\n    }\n  }]);\n  return User;\n}(); // Создадим объект этого класса:\nvar user = new User(\"john\");\n// Запишем код метода в переменную:\n\nvar func = user.getName;\n// В момент записи метода в переменную контекст и потерялся. Теперь this внутри кода метода не будет указывать на объект класса. Проверим, вызовем нашу функцию:\n\n// console.log(func()); // ошибка\n// Для решения проблемы можно привязать контекст к функции, например, через bind:\n\n// func = func.bind(user);\n// console.log(func()); // работает\n/*\r\nfunction sayHello() {\r\n  console.log(`Hello, ${this.sur}!`);\r\n}\r\n\r\nconst person = {\r\n  name: 'John',\r\n  sur: \"Douell\"\r\n};\r\n\r\nconsole.log(sayHello.call(person)); // Выведет \"Hello, John!\"\r\n\r\n\r\nfunction sayGoodbye() {\r\n  console.log (`Goodbye ${this.mom} `);\r\n};\r\n\r\nlet personen = {\r\n  name: 'Lily',\r\n  name2: 'Mikki',\r\n  mom: 'Pippi'\r\n};\r\nsayGoodbye.call(personen);\r\n\r\n*/\n/*\r\nСтворіть клас A з методом read\r\nСтворіть клас B, який наслідується (extends) від A, та має метод close\r\nСтворіть instanceB класу B\r\nПеревірити:\r\nнаявніcть методів read/close в instanceB через оператор in\r\nнаявніcть методів read/close в instanceB через метод hasOwnProperty\r\nвсі ключі instanceB (Object.keys)\r\n\r\n*/\nvar A = /*#__PURE__*/function () {\n  function A() {\n    _classCallCheck(this, A);\n    _defineProperty(this, \"variableA\", void 0);\n  }\n  _createClass(A, [{\n    key: \"read\",\n    value: function read() {\n      console.log(\"I am a method READ in obj A\");\n    }\n  }]);\n  return A;\n}();\nvar B = /*#__PURE__*/function (_A) {\n  _inherits(B, _A);\n  var _super = _createSuper(B);\n  function B() {\n    var _this;\n    _classCallCheck(this, B);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"variableB\", void 0);\n    return _this;\n  }\n  _createClass(B, [{\n    key: \"close\",\n    value: function close() {\n      console.log(\"I am a method CLOSE in obj B\");\n    }\n  }]);\n  return B;\n}(A);\nvar instanceB = new B();\n\n// console.log('variableA' in instanceB); // true\n// console.log('read' in A.prototype); //true\n\n// console.log('read' in instanceB);   //true\n// console.log('close' in instanceB); // true\n\n// console.log(instanceB.hasOwnProperty('read')); // false becauce it is prop of prototype\n// console.log(instanceB.hasOwnProperty('close')); // false becauce it is prop of prototype\n\n// const keys = Object.keys(instanceB);\n\n// console.log(keys);\n\n// let key1 = 'x';\n// let key2 = 'y';\n// let key3 = 'z';\n\n// let obj = {\n// \t[key1]: 1,\n// \t[key2]: 2,\n// \t[key3]: 3\n// };\n// delete obj[key2];\n// console.log( obj[key1], obj[key2], obj[key3]);\n// console.log(obj);\n// console.log([key1] in obj);\n// console.log(typeof obj[key1]);\n// console.log( typeof {x: 1, y: 2, z: 3} );\n// console.log( typeof {} );\n// const arr = ['a', 'b', 'c'];\n// arr = [1, 2, 3];\n// console.log(arr);\n\n// function calculateActivity(monthOfWeek) {\n//   switch (monthOfWeek) {\n//     case \"суббота\":\n//     case \"воскресенье\":\n//       console.log(\"Отдых\");\n//       break;\n//     case \"понедельник\":\n//     case \"вторник\":\n//       console.log(\"Средняя активность\");\n//       break;\n//     case \"среда\":\n//     case \"четверг\":\n//       console.log(\"Высокая активность\");\n//       break;\n//     case \"пятница\":\n//       console.log(\"Средняя активность\");\n//       // Дополните кейсы для различных уровней активности\n//       break;\n//     default:\n//       console.log(\"Некорректный день недели\");\n//   }\n// }\n\n// calculateActivity(\"пятница\"); // Пример вывода: \"Легкая активность\"\n// console.log(calculateActivity());\n// let monthWeek = (month) => {\n//   switch (month) {\n//     case 1:\n//       console.log(\"понедельник\");\n//       break;\n\n//     case 2:\n//       console.log(\"вторник\");\n//       break;\n\n//     case 3:\n//       console.log(\"среда\");\n//       break;\n\n//     case 4:\n//       console.log(\"четверг\");\n//       break;\n\n//     case 5:\n//       console.log(\"пятница\");\n//       break;\n\n//     case 6:\n//       console.log(\"суббота\");\n//       break;\n\n//     case 7:\n//       console.log(\"воскресенье\");\n//       break;\n\n//     default:\n//       console.log(\"Введите корректный день недели от 1 до 7\");\n//       break;\n//   }\n// };\n// console.log(monthWeek(3));\n\n// // let lang = 'ru';\n\n// // if (lang == 'ru') {\n// // \tconsole.log('рус');\n// // } else if (lang == 'en') {\n// // \tconsole.log('анг');\n// // } else if (lang == 'de') {\n// // \tconsole.log('нем');\n// // } else {\n// // \tconsole.log('язык не поддерживается');\n// // }\n\n// let langSwitch = (lang) => {\n//   switch (lang) {\n//     case \"ru\":\n//       console.log(\"RU\");\n//       break;\n\n//     case \"en\":\n//       console.log(\"EN\");\n//       break;\n\n//     case \"de\":\n//       console.log(\"DE\");\n//       break;\n\n//     default:\n//       console.log(\"Any\");\n//       break;\n//   }\n// };\n// console.log(langSwitch('ru'));\n\n// let age = 17;\n// let adult = age >= 18 ? true : false;\n// console.log(adult);\n\n// let gen = 89;\n// let a = 4, b = 4; // Corrected the declaration of variables a and b\n// let c = gen <= 456 ? ((a, b) => { let res = a + b; return res; })(a, b) : console.log('hhhh');\n\n// // let gen = 400;\n// // let a= 4;\n// // let b = 5;\n\n// // let c = gen <= 345 ? ((a, b) => {let res = a + b; return res; }) (a, b) : console.log('LOH');\n// // console.log(c);\n\n// let str = 'abcde';\n// let first = str[0] === 'a' ? console.log('YES') : console.log('NO');\n// console.log(first);\n\n// let num = 12345;\n// num = String(num);\n// console.log(num);\n\n// let firstNum = num[0] == 1 || num[0] == 2 || num[0] == 3 ? console.log('YES') : console.log('NO');\n\n// let season = (month) => {\n//   if ((month >= 1 && month <= 2) || month === 12) {\n//     console.log(\"WINTER\");\n//   } else if (month >= 3 && month <= 5) {\n//     console.log(\"SPRING\");\n//   } else if (month >= 6 && month <= 8) {\n//     console.log(\"SUMMER\");\n//   } else if (month >= 9 && month <= 11) {\n//     console.log(\"AUTUMN\");\n//   } else {\n//     console.log(\"PUT 1-12\");\n//   }\n// };\n\n// let num = 123456;\n\n// let strNum = num.toString();\n// console.log(strNum.length);\n// let sum13 = 0;\n// let sum46 = 0;\n\n// for (let i = 0; i < 3; i++) {\n//   sum13 += parseFloat(strNum[i]);\n// }\n// for (let i = 3; i < 6; i++) {\n//   sum46 += parseFloat(strNum[i]);\n// }\n\n// console.log(sum13, sum46);\n\n// let obj = {x: 1, y: 2, z: 3};\n\n// for (elem in obj) {\n// }\n// console.log(elem);\n// console.log(obj[elem]);\n// let i = 1;\n// while (i <= 5) {\n//   console.log(i);\n// i++\n// }\n/*\r\n\r\nДано число num с неким начальным значением. \r\nУмножайте его на 3 столько раз, пока результат \r\nумножения не станет больше 1000. Какое число получится? \r\nПосчитайте количество итераций, необходимых для этого.\r\n*/\n// let num = 10;\n// let count = 0;  // Инициализируем переменную count\n// let res = 0;\n\n// while (num >= 2) {\n//   res = num / 3;\n//   num = res; // Обновляем значение num, чтобы цикл мог продолжиться\n//   count++;\n// }\n// console.log(res); // Ожидаемый результат после выхода из цикла\n// console.log(count); // Количество итераций\n\n// let arr = Array.from({length: 8}, (value, index) => index = index + 1);\n// console.log(arr);\n\n// let iterable = 'hello';\n\n// let arr1 = Array.from(iterable, (value, index) => {\n//   console.log(`Index ${index}: ${value}`);\n//   return value.toUpperCase();\n// });\n\n// console.log(arr1);\n\n// let result = arr1.find((elem) => elem === 'H' );\n// console.log(result);\n// let index = arr1.findIndex((elem) => elem === \"L\");\n// let index1 = arr1.indexOf(\"L\");\n// console.log(index);\n// console.log(index1);\n\n// let arr = [1, 2, 3, 4, 5, -5, 6, 7, 8, 9];\n// summ = 0;\n// length = arr.findIndex((elem) => elem < 0);\n// for( let i = 0; i < length; i++) {\n//   summ += arr[i];\n// };\n// console.log(summ);\n\n// let index3 = arr.indexOf(3);\n// console.log(arr.indexOf(9));\n\n// for (let i = 1; i <= 3; i++) {\n\n//   for(let k = 1; k <= 4; k++){\n//     document.write(' ' + i + k);\n\n//   }\n// };\n\n// for (let i = 1; i <= 9; i++) {\n// \tfor (let j = 1; j <= 3; j++) {\n// \t\tdocument.write(i);\n// \t}\n// }\n\n// let arr = [];\n// for(let i = 1; i <= 10; i++) {\n//   arr.push('x');\n// };\n// console.log(arr);\n\n/* Дан массив с числами. Переберите его циклом и \r\nзапишите в новый массив только положительные из чисел.\r\n*/\n\n// let array = [1, 2, 3, -4, 5, -6, 7, -8, 9];\n// let arr1 = [];\n// let arrayFilter = [];\n// for(let i = 0; i <= array.length - 1; i++) {\n//   if(array[i] > 0 ) {\n//     arr1.push(array[i]);\n//   }\n// }\n// let result = array.filter((elem) => elem < 0);\n// arrayFilter.push(result);\n// console.log(arr1);\n// console.log(arrayFilter);\n\n/* Дан массив с числами. Переберите этот \r\nмассив циклом и возведите каждый элемент этого массива в квадрат.\r\n*/\n\n// for( let i = 0; i < array.length; i++) {\n//   array[i] = array[i] ** 2;\n// };\n// console.log(array);\n// let array1 = array.map((elem)  => Math.pow(elem, 0.5 ));\n\n// console.log(array1);\n\n// let arr1 = ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'];  //klucz\n// let arr2 = [1, 2, 3, 4, 5, 6, 7];   // znaczenie\n\n// let obj = Object.fromEntries(arr1.map((key, index) => [key, arr2[index]]));\n// let obj2 = {};\n// for(let i = 0; i < arr1.length; i++) {\n//   let key = arr1[i];\n//   let value = arr2[i];\n//   obj2[key] = value;\n\n// }\n//   console.log(obj2, obj);\n\n// let obj2 = Object.fromEntries(\n//   Object.entries(obj).filter(([key, value]) => value % 2 === 0)\n// );\n\n// let keysArray = Object.keys(obj);\n// let valuesArray = Object.values(obj);\n\n// let obj2 = Object.fromEntries(valuesArray.map((key, index) => [key, keysArray[index]]));\n\n// console.log(obj2);\n\n// let obj = { a: 1, b: 2, c: 3, d: 4, e: 5 };\n// for(let key in obj) {\n//   obj[key] *=2;\n// };\n\n// console.log(obj);\n\n// let arr = ['a', 'b', 'c', 'd', 'e'];\n\n// let flag = false;\n\n// for(let elem of arr) {\n//   if(elem === 'p') {\n//     flag = true;\n//   }\n// };\n// console.log(flag);\n\n//   let arr = [\n// \t['a', 'b', 'c'],\n// \t['d', 'e', 'f'],\n// \t['g', 'h', 'i'],\n// \t['j', 'k', 'l'],\n// ];\n\n// // Выведите с его помощью элементы с текстом 'l', 'e', 'g' и 'a'.\n// console.log(arr[3] [2]);\n// console.log(arr[1][1]);\n// console.log(arr[2][0]);\n// console.log(arr[0][0]);\n\n// Обращаясь к каждому элементу массива найдите сумму всех его элементов.\n\n// let arr = [[1, 2], [3, 4], [5, 6]];\n\n// console.log( arr[0][0] + arr[0][1] + arr[1][0]+ arr[1][1] + arr[2][0] + arr[2][1])\n\n//   summ = arr.flat().reduce((accu, value) => accu += value, 0);\n//   console.log(arr1);\n//   console.log(summ);\n\n// let arr = [\n//   [\n//     [\"a\", \"b\"],\n//     [\"c\", \"d\"],\n//   ],\n//   [\n//     [\"e\", \"f\"],\n//     [\"g\", \"h\"],\n//   ],\n//   [\n//     [\"i\", \"j\"],\n//     [\"k\", \"l\"],\n//   ],\n// ];\n\n// let arr1 = arr.flat(2);\n// console.log(arr1);\n// console.log(arr[0][0][1], arr[1][1][0], arr[2][0][0]);\n\n// let arrow = [\n//   [1, 2, 3, [4, 5, [6, 7]]],\n//   [8, [9, 10]],\n// ];\n// console.log(arrow[0][0], arrow[0][1], arrow[0][2],\n// arrow[0][3][0], arrow[0][3][1], arrow[0][3][2][0],\n// arrow[0][3][2][1], arrow[1][0], arrow[1][1][0], arrow[1][1][1]);\n\n// console.log(arrow[0][3][2][0]);\n// console.log(arr[0][0] + arr[0][1] + arr[0][2] + arr)\n\n// let arrow1 = arrow.flat(3).reduce((accu, value) => (accu += value), 0);\n// console.log(arrow1);\n\n// let arr = [[1, 2, 3, 4, 5], [6, 7, 8], [9, 10]];\n// let summ = 0;\n// for(let subArr of arr) {\n//   for(let elem of subArr){\n//      summ += elem;\n//     }\n//     // console.log(summ);\n//   };\n\n//   let arr1 = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]];\n// let summ1 = 0;\n//   for(let subAr1 of arr1) {\n//     for(let subAr2 of subAr1){\n//       for(elem of subAr2) {\n//         summ1 += elem;\n//         console.log(elem);\n//       }\n//     }\n//   };\n//   console.log(summ1);\n\n//   let arr = [[1, 2, 3, 4, 5], [6, 7, 8], [9, 10]];\n\n// for(let i = 0; i < arr.length; i++) {\n//   for(let j = 0; j < arr[i].length; j++) {\n//     console.log(arr[i][j]);\n//   }\n// };\n\n// let arr = [];\n\n// for (let i = 0; i < 3; i++) {\n//    arr[i] = [];\n//   for(let j = 0; j < 4; j++) {\n//     let j = 'x';\n//     arr[i].push(j)\n//   }\n// };\n// console.log(arr);\n\n/*\r\nСформируйте с помощью трех вложенных циклов\r\n следующий массив:\r\n\r\n[\r\n\t[\r\n\t\t[1, 2, 3, 4, 5],\r\n\t\t[1, 2, 3, 4, 5],\r\n\t],\r\n\t[\r\n\t\t[1, 2, 3, 4, 5],\r\n\t\t[1, 2, 3, 4, 5],\r\n\t],\r\n\t[\r\n\t\t[1, 2, 3, 4, 5],\r\n\t\t[1, 2, 3, 4, 5],\r\n\t],\r\n]\r\n*/\n\n// let arr = [];\n\n// for (let i = 0; i < 3; i++) {\n//   arr[i] = [];\n//   for (let j = 0; j < 2; j++) {\n//     arr[j] = [];\n\n//     for (let k = 1; k <= 5; k++) {\n//       arr[j].push(k);\n//     }\n//   }\n// }\n\n// console.log(arr);\n\n// let arr = [];\n\n// for (let i = 0; i < 3; i++) {\n//   arr[i] = [];\n// \tfor (let j = 1; j <= 5; j++) {\n// \t\tarr[i].push(j);\n// \t}\n// }\n\n// console.log(arr);\n\n// let arr = [];\n\n// for (let i = 0; i < 3; i++) {\n// \tarr[i] = [];\n\n// \tfor (let j = 1; j <= 5; j++) {\n// \t\tarr[i].push(j);\n// \t}\n// }\n\n// console.log(arr);\n/*\r\nСформируйте с помощью двух вложенных циклов следующий массив:\r\n\r\n[[1, 2], [3, 4], [5, 6], [7, 8]]\r\n*/\n\n// let arr = [];\n// let k = 1;\n// for( let i = 1; i <= 4; i++) {\n//   arr[i] = [];\n//   for(let j = 1; j <= 2; j++) {\n//     arr[i].push(k++);\n//   }\n// };\n// console.log(arr);\n\n/*\r\nСформируйте с помощью двух вложенных циклов \r\nследующий массив:\r\n\r\n[[2, 4, 6], [8, 10, 12], [14, 16, 18], [20, 22, 24]]\r\n*/\n// let arr = [];\n// let k = 2;\n// for(let i = 0; i < 4; i++) {\n//   arr[i] = [];\n//   for(let j = 0; j < 3; j++) {\n//     arr[i].push(k);\n//     k += 2\n//   }\n// };\n// console.log(arr);\n\n/*\r\nСформируйте с помощью трех вложенных циклов \r\nследующий трехмерный массив:\r\n\r\n[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\r\n*/\n// let arr = [];\n// let counter = 1;\n// for(let i = 0; i < 2; i++) {\n//   arr[i] = [];\n//   for(let j = 0; j < 2; j++) {\n//     arr[i][j] = [];\n//     for(let k = 0; k < 2; k++) {\n//       arr[i][j][k] = counter++;\n//     }\n//   }\n// }\n// console.log(arr);\n\n// [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n// let obj = {\n// \tkey1: {\n// \t\tkey1: 1,\n// \t\tkey2: 2,\n// \t\tkey3: 3,\n// \t},\n// \tkey2: {\n// \t\tkey1: 4,\n// \t\tkey2: 5,\n// \t\tkey3: 6,\n// \t},\n// \tkey3: {\n// \t\tkey1: 7,\n// \t\tkey2: 8,\n// \t\tkey3: 9,\n// \t},\n// };\n// let summA = obj.key1.key1 + obj.key1.key2 + obj.key1.key3;\n// console.log(summA);\n// let summB = obj.key2.key1 + obj.key2.key2 + obj.key2.key3;\n// console.log(summB);\n// let summC = obj.key3.key1 + obj.key3.key2 + obj.key3.key3;\n// console.log(summC);\n// let total = summA + summB + summC;\n// console.log(total)\n\n// let total2 = 0;\n// for(let innKey in obj) {\n//   for(outKey in obj[innKey]) {\n//     total2 += obj[innKey][outKey];\n//   }\n// }\n// console.log(total2);\n\n// let obj = {\n// \t1: {\n// \t\t1: 'a1',\n// \t\t2: 'a2',\n// \t\t3: 'a3',\n// \t},\n// \t2: {\n// \t\t1: 'b1',\n// \t\t2: 'b2',\n// \t\t3: 'b3',\n// \t},\n// \t3: {\n// \t\t1: 'c1',\n// \t\t2: 'c2',\n// \t\t3: 'c3',\n// \t},\n// }\n// console.log( obj[3][1], obj[2][2]);\n\n// let obj = {\n// \tkey1: {\n// \t\ta: 1, b: 2, c: {\n// \t\t\td: 3,\n// \t\t\te: 4,\n// \t\t}, f: 5,\n// \t},\n// \tkey2: {\n// \t\tg: 6, h: 7,\n// \t},\n// };\n// console.log(obj.key1.a + obj.key1.b + obj.key1.c.d + obj.key1.c.e +\n// obj.key1.f + obj.key2.g + obj.key2.h);\n\n// let obj = {\n// \ta: {\n// \t\t1: 'a1',\n// \t\t2: 'a2',\n// \t\t3: 'a3',\n// \t},\n// \tb: {\n// \t\t1: 'b1',\n// \t\t2: 'b2',\n// \t\t3: 'b3',\n// \t},\n// \tc: {\n// \t\t1: 'c1',\n// \t\t2: 'c2',\n// \t\t3: 'c3',\n// \t},\n// }\n// for(let key in obj) {\n//   let subObj = obj[key];\n//   // console.log(subObj);\n\n//   for(subKey in subObj) {\n//       console.log(subObj[subKey]);\n//   }\n// }\n\n// let obj = {\n// \t1: {\n// \t\t1: 11,\n// \t\t2: 12,\n// \t\t3: 13,\n// \t},\n// \t2: {\n// \t\t1: 21,\n// \t\t2: 22,\n// \t\t3: 23,\n// \t},\n// \t3: {\n// \t\t1: 24,\n// \t\t2: 25,\n// \t\t3: 26,\n// \t},\n// }\n// let sum = 0;\n// for(let key in obj) {\n//   subObj = obj[key];\n//   for(let subkey in subObj ) {\n//     sum += subObj[subkey];\n//   }\n// };\n// console.log(sum);\n\n// let obj = {\n// \t1: {\n// \t\t1: {\n// \t\t\t1: 111,\n// \t\t\t2: 112,\n// \t\t\t3: 113,\n// \t\t},\n// \t\t2: {\n// \t\t\t1: 121,\n// \t\t\t2: 122,\n// \t\t\t3: 123,\n// \t\t},\n// \t},\n// \t2: {\n// \t\t1: {\n// \t\t\t1: 211,\n// \t\t\t2: 212,\n// \t\t\t3: 213,\n// \t\t},\n// \t\t2: {\n// \t\t\t1: 221,\n// \t\t\t2: 222,\n// \t\t\t3: 223,\n// \t\t},\n// \t},\n// \t3: {\n// \t\t1: {\n// \t\t\t1: 311,\n// \t\t\t2: 312,\n// \t\t\t3: 313,\n// \t\t},\n// \t\t2: {\n// \t\t\t1: 321,\n// \t\t\t2: 322,\n// \t\t\t3: 323,\n// \t\t},\n// \t},\n// };\n\n// let sum = 0;\n// for(let key in obj) {\n//   subObj = obj[key];\n//   console.log(obj[key]);\n//   for(let subKey in subObj) {\n//     subSubObj = subObj[subKey];\n//     console.log(subObj[subKey])\n//     for( let subsubKey in subSubObj) {\n//       sum += subSubObj[subsubKey];\n//     }\n//   }\n// }\n// console.log(sum);\n\n// let students = {\n// \t'group1': ['name11', 'name12', 'name13'],\n// \t'group2': ['name21', 'name22', 'name23'],\n// \t'group3': ['name31', 'name32', 'name33'],\n// };\n// console.log(students['group3'][0]);\n\n// let data1 = {\n// \t1: [\n// \t\t'data11',\n// \t\t'data12',\n// \t\t'data13',\n// \t],\n// \t2: [\n// \t\t'data21',\n// \t\t'data22',\n// \t\t'data23',\n// \t],\n// \t3: [\n// \t\t'data31',\n// \t\t'data32',\n// \t\t'data33',\n// \t],\n// \t4: [\n// \t\t'data41',\n// \t\t'data42',\n// \t\t'data43',\n// \t],\n// };\n\n// for(let key in data1) {\n//   for(let dat of data1[key]) {\n//     console.log(dat);\n//   }\n// }\n\n// let data = [\n// \t{\n// \t\t1: 'data11',\n// \t\t2: 'data12',\n// \t\t3: 'data13',\n// \t},\n// \t{\n// \t\t1: 'data21',\n// \t\t2: 'data22',\n// \t\t3: 'data33',\n// \t},\n// \t{\n// \t\t1: 'data31',\n// \t\t2: 'data32',\n// \t\t3: 'data33',\n// \t},\n// ];\n\n// console.log((data[0])[1])\n\n// for(elem of data) {\n//   for(key in elem)\n//   console.log(elem[key])\n// }\n\n// let data = [\n// \t{\n// \t\t1: [\n// \t\t\t'data111',\n// \t\t\t'data112',\n// \t\t\t'data113',\n// \t\t],\n// \t\t2: [\n// \t\t\t'data121',\n// \t\t\t'data122',\n// \t\t\t'data123',\n// \t\t],\n// \t},\n// \t{\n// \t\t1: [\n// \t\t\t'data211',\n// \t\t\t'data212',\n// \t\t\t'data213',\n// \t\t],\n// \t\t2: [\n// \t\t\t'data221',\n// \t\t\t'data222',\n// \t\t\t'data223',\n// \t\t],\n// \t},\n// \t{\n// \t\t1: [\n// \t\t\t'data411',\n// \t\t\t'data412',\n// \t\t\t'data413',\n// \t\t],\n// \t\t2: [\n// \t\t\t'data421',\n// \t\t\t'data422',\n// \t\t\t'data423',\n// \t\t],\n// \t},\n// ];\n\n// for (let elem of data) {\n//   for (let key in elem) {\n//     for(let item of elem[key]) {\n//       console.log(item);\n//     }\n//   }\n// };\n\n// let arr = [];\n\n// for (let i = 0; i < 2; i++) {\n// \tarr[i] = []; // создаем подмассив\n\n// \tfor (let j = 0; j < 5; j++) {\n// \t\tarr[i].push(j + 1); // заполняем подмассив числами\n// \t}\n// }\n\n// console.log(arr);\n\n// let users = [\n// \t{\n// \t\tname: 'name1',\n// \t\tsurn: 'surn1',\n// \t},\n// \t{\n// \t\tname: 'name2',\n// \t\tsurn: 'surn2',\n// \t},\n// \t{\n// \t\tname: 'name3',\n// \t\tsurn: 'surn3',\n// \t},\n// ];\n\n// for(let user of users) {\n//   console.log(user.name + '  ' + user.surn);\n// }\n\n// let employees = [\n// \t{\n// \t\tname: 'name1',\n// \t\tsalary: 300,\n// \t\tage: 28,\n// \t},\n// \t{\n// \t\tname: 'name2',\n// \t\tsalary: 400,\n// \t\tage: 29,\n// \t},\n// \t{\n// \t\tname: 'name3',\n// \t\tsalary: 500,\n// \t\tage: 30,\n// \t},\n// \t{\n// \t\tname: 'name4',\n// \t\tsalary: 600,\n// \t\tage: 31,\n// \t},\n// \t{\n// \t\tname: 'name5',\n// \t\tsalary: 700,\n// \t\tage: 32,\n// \t},\n// ];\n// let totalSalary = 0;\n// for (let worker of employees) {\n//   if(worker.age >= 30) {\n//     totalSalary += worker.salary;\n//   }\n\n// };\n// console.log(totalSalary);\n\n// let obj = {\n// \t'ru': ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс'],\n// \t'en': ['mn', 'ts', 'wd', 'th', 'fr', 'st', 'sn'],\n// };\n\n// console.log(obj.ru[3]);\n// let lang = 'ru';\n// let key = 3;\n\n// console.log(obj[lang][key]);\n\n// let months = {\n// \t'ru': [\n// \t\t'январь',\n// \t\t'февраль',\n// \t\t'март',\n// \t\t'апрель',\n// \t\t'май',\n// \t\t'июнь',\n// \t\t'июль',\n// \t\t'август',\n// \t\t'сентябрь',\n// \t\t'октябрь',\n// \t\t'ноябрь',\n// \t\t'декабрь',\n// \t],\n// \t'en': [\n// \t\t'january',\n// \t\t'february',\n// \t\t'march',\n// \t\t'april',\n// \t\t'may',\n// \t\t'june',\n// \t\t'july',\n// \t\t'august',\n// \t\t'september',\n// \t\t'october',\n// \t\t'november',\n// \t\t'december',\n// \t],\n// };\n// // Даны также следующие переменные:\n\n// let lang = 'en'; // может быть или 'ru' или 'en'\n// let month1 = 11;   // число от 0 до 11\n\n// console.log(months[lang][month1]);\n\n// let affairs = {\n// \t'2018': {\n// \t\t11: {\n// \t\t\t29: ['дело111', 'дело112', 'дело113'],\n// \t\t\t30: ['дело121', 'дело122', 'дело123'],\n// \t\t},\n// \t\t12: {\n// \t\t\t30: ['дело211', 'дело212', 'дело213'],\n// \t\t\t31: ['дело221', 'дело222', 'дело223'],\n// \t\t},\n// \t},\n// \t'2019': {\n// \t\t12: {\n// \t\t\t29: ['дело311', 'дело312', 'дело313'],\n// \t\t\t30: ['дело321', 'дело322', 'дело323'],\n// \t\t\t31: ['дело331', 'дело332', 'дело333'],\n// \t\t}\n// \t},\n// };\n// let year  = '2019';\n// let month = 12;\n// let data = 29;\n// console.log(affairs[year][month][data][0])\n\n// let obj = {\n// \tkey1: {\n// \t\tkey2: '12',\n// \t\tkey3: '13',\n// \t},\n// \tkey2: {\n// \t\tkey4: '24', //\n// \t\tkey5: '25',\n// \t},\n// }\n\n// let key1 = 'key1';\n// let key2 = 'key2';\n// console.log(obj[key2]['key4']);\n\n// let obj = {\n// \tkey1: {\n// \t\tkey2: '12',\n// \t\tkey3: '13',\n// \t},\n// \tkey2: {\n// \t\tkey4: '24',\n// \t\tkey5: '25',\n// \t},\n// }\n\n// let key1 = 'key2';\n// let key2 = 'key4';\n// console.log(obj.key2.key4);\n\n// let obj = {\n// \tkey1: {\n// \t\tkey2: '12',\n// \t\tkey3: '13',\n// \t},\n// \tkey2: {\n// \t\tkey4: '24',\n// \t\tkey5: '25',\n// \t},\n// }\n\n// let key1 = 'key2';\n// let key2 = 'key4';\n// console.log(obj.key1['key2']);\n\n// let users = [\n// \t{\n// \t\tname: 'name1',\n// \t\tsurn: 'surn1',\n// \t},\n// \t{\n// \t\tname: 'name2',\n// \t\tsurn: 'surn2',\n// \t},\n// \t{\n// \t\tname: 'name3',\n// \t\tsurn: 'surn3',\n// \t},\n// ];\n\n// users.push({\n//   name: 'name4',\n//   surn: 'surn4',\n// });\n// console.log(users);\n\n// let employees = [\n// \t{\n// \t\tname: 'name1',\n// \t\tsalary: 300,\n// \t\tage: 28,\n// \t},\n// \t{\n// \t\tname: 'name2',\n// \t\tsalary: 400,\n// \t\tage: 29,\n// \t},\n// \t{\n// \t\tname: 'name3',\n// \t\tsalary: 500,\n// \t\tage: 30,\n// \t},\n// ];\n\n// employees.push({\n//   name: 'name4',\n//   salary: 800,\n//   age: 80,\n// });\n// console.log(employees);\n\n// let students = {\n// \t'group1': ['student11', 'student12', 'student13'],\n// \t'group2': ['student21', 'student22', 'student23'],\n// \t'group3': ['student31', 'student32'],\n// };\n\n// students.group1.push('student14');\n// students.group4 = [];\n// students.group4.push('student 4131')\n// console.log(students);\n\n// let students = {\n// \t'group1': {\n// \t\t'subgroup11': ['student111', 'student112', 'student113'],\n// \t\t'subgroup12': ['student121', 'student122', 'student123'],\n// \t},\n// \t'group2': {\n// \t\t'subgroup21': ['student211', 'student212', 'student213'],\n// \t\t'subgroup22': ['student221', 'student222', 'student223'],\n// \t},\n// \t'group3': {\n// \t\t'subgroup31': ['student311', 'student312', 'student313'],\n// \t\t'subgroup32': ['student321', 'student322', 'student323'],\n// \t},\n// };\n\n// // Добавьте нового студента в подгруппу 'subgroup11'\n// // students['group1']['subgroup11'].push('student114');\n\n// // students['group1']['subgroup 14'] = [];\n// // console.log(students['group1']);\n\n// // students['group4'] = {};\n// // students['group4']['subgroup41'] = [];\n// // students['group4']['subgroup42'] = [];\n// // students['group4']['subgroup43'] = [];\n// // students['group4']['subgroup41'].push('student411', 'student412', 'student413');\n\n// // console.log(students);\n\n// // Сделайте четвертую группу, в ней сделайте\n// // подгруппу и добавьте в нее двух новых студентов.\n\n// console.log( Math.pow(3,3));\n// console.log(Math.sqrt(36));\n\n// let arr = [4, 2, 5, 19, 13, 0, 10];\n// Найдите квадратный корень из суммы кубов его элементов.\n// Для решения воспользуйтесь циклом for.\n// let summ = 0;\n// for (let i = 0; i < arr.length ; i++) {\n//   summ += Math.pow(arr[i], 3);\n// }\n// console.log(Number(Math.sqrt(summ).toFixed(2)));\n\n// // Найдите квадратный корень из 379.\n// // Результат округлите до целых, до десятых, до сотых\n\n// console.log(Math.sqrt(379).toFixed(0));\n// console.log(Math.sqrt(379).toFixed(1));\n// console.log(Math.sqrt(379).toFixed(2));\n\n// Найдите квадратный корень из 587. Округлите результат в\n// большую и меньшую стороны,\n// запишите результаты округления в объект с ключами 'floor' и 'ceil'.\n\n// console.log(Math.sqrt(579));\n// console.log(Math.ceil(Math.sqrt(579)));\n// console.log(Math.floor(Math.sqrt(579)));\n\n// // Даны числа 4, -2, 5, 19, -130, 0, 10. Найдите минимальное и максимальное число.\n\n// console.log( Math.min(4, -2, 5, 19, -130, 0, 10));\n// console.log(Math.max(4, -2, 5, 19, -130, 0, 10));\n\n// function getInit(min, max) {\n//   console.log(Math.random())\n// };\n// getInit();\n// getInit();\n// getInit();\n// getInit();\n\n// let num  = (min, max) => {\n//   let num1 = Math.random() * (max - min) + min;\n//   console.log(num1);\n//   return num1;\n// };\n// num(2,5);\n// num(2,5);\n\n// let bum = (min, max) => {\n//   let num2 = Math.ceil(Math.random() * (max - min +1) + min);\n//   return num2;\n// };\n\n// console.log(bum(2,6));\n\n// console.log(bum(2,6));\n\n// console.log(bum(2,6));\n// console.log(bum(2,6));\n\n// let num = (max, min) => {\n//   let num1 =Math.ceil(Math.random() *(max - min + 1) +min);\n//   return num1;\n// };\n// console.log(num(10, 100));\n// console.log(num(10, 100));\n\n// console.log(num(10, 100));\n\n// console.log(num(10, 100));\n\n// console.log(num(10, 100));\n\n// let str = '12345 учу javascript!';\n\n// let substr = str.substring(-1);\n// console.log(str.substring(2,5));\n// console.log(str.slice(0,3));\n\n// let arr = [1, 2, 3, 4, 5];\n\n// // [1, 'a', 'b', 2, 3, 4, 'c', 5, 'e']\n\n// arr.splice(1, 0, 'a');\n// arr.splice(2, 0, 'b');\n// arr.splice(6, 0, 'c');\n// arr.splice(arr.length, 0, 'e');\n\n// console.log(arr);\n\n// let obj = {a: 1, b: 2, c: 3};\n\n// console.log(Object.keys(obj));\n\n// let num = 12345;\n// let arr = String(num).split('');\n\n// let prod = 1;\n// for (let digit of arr) {\n// \tprod *= Number(digit);\n// }\n\n// let obj = {\n// \tfunc1: function() {(console.log('1'))},\n// \tfunc2: function() {(console.log('2'))},\n// \tfunc3: function() {(console.log('3'))}\n// };\n// console.log(obj.func1());\n\n// let obj = {\n// \tfunc1: function() { return 1;},\n// \tfunc2: function() { return 2;},\n// \tfunc3: function() { return 3;}\n// };\n// console.log(obj.func1() + obj.func2() + obj.func3());\n\n// let sum = 0;\n// for(let key  in obj) {\n//   sum += obj[key]();\n// }\n// console.log(sum);\n\n/*\r\nСделайте объект с тремя функциями, каждая из которых \r\nбудет принимать параметром массив с числами. Сделайте так, \r\nчтобы первая функция возвращала сумму элементов массива, \r\nвторая функция - сумму квадратов, а третья - сумму кубо\r\n*/\n\n// let arr = [1, 2, 3, 4, 5];\n// let sum = 0;\n// let sqrtsum = 0;\n// let sumcub = 0;\n// let obj = {\n//   func1: function () {\n//     for (let elem of arr) {\n//       sum += elem;\n//     }\n//     return sum;\n//   },\n//   func2: function () {\n//     for (let elem of arr) {\n//       sqrtsum += Math.pow(elem, 2);\n//     }\n//     return sqrtsum;\n//   },\n//   func3: function () {\n//     for (let elem of arr) {\n//       sumcub += Math.pow(elem, 3);\n//     }\n//     return sumcub;\n//   },\n// };\n// console.log(obj.func1(arr));\n// console.log(obj.func2());\n// console.log(obj.func3());\n/*\r\nСделайте функцию test, параметрами принимающую 3 \r\nфункции. Передайте в нее первым параметром функцию, \r\nвозвращающую 1, вторым - функцию, возвращающую 2, \r\nтретьим - функцию, возвращающую 3. Выведите в консоль \r\nсумму результатов функций.\r\n*/\n\n// function test(func1, func2, func3) {\n// \tconsole.log(func1());\n// \tconsole.log(func2());\n//   console.log(func3());\n//   console.log(func1() + func2() + func3());\n\n// };\n\n// test(\n//   function() {return 1;},\n//   function() {return 2;},\n//   function() {return 3;}\n// );\n// let get1 = function() {\n//   return 1;\n// };\n// let get2 = function() {\n//   return 2;\n// };\n// let get3 =function() {\n//   return 7;\n// };\n\n// function test(func1, func2, func3) {\n//   console.log(func1() + func2() + func3());\n// };\n\n// test(get1, get2, get3);\n\n// function test(func) {\n//   console.log(func(3));\n// };\n\n// let red = function(num) {\n//   return num*num;\n// };\n// test(red);\n\n// function test(num, func1) {\n//   console.log(func1(num));\n// };\n\n// let red = function(num){\n//   return num * num;\n// }\n// let red1 = function(num) {\n//   return Math.pow(num, 3);\n// };\n// test(2, red1);\n\n// function test(num, func1, func2) {\n//   // console.log(func1(num) + func2(num));\n//   return func1(num) + func2(num);\n// };\n\n// let red1 = function(num) {\n//   return Math.pow(num, 2);\n// };\n\n// console.log(red1(3));\n\n// let red2 = function(num) {\n//   return Math.pow(num, 3);\n// };\n// console.log(red2(3));\n\n// console.log(test(3, red1, red2));\n\n// function test(num, func1, func2){\n//   console.log(func1(num) + func2(num));\n// };\n\n// function red1(num) {\n//   return Math.pow(num, 2);\n// };\n\n// function red2(num) {\n//   return Math.pow(num, 3);\n// };\n// test(2, red1, red2);\n\n// function test(arr, func1) {\n//   for (let i = 0; i < arr.length; i++) {\n//     arr[i] = func1(arr[i]);\n//   }\n//   return arr;\n// };\n\n// let result = test(\n//   [1, 2, 3],\n//   function(num) { return num * num;}\n// );\n// console.log(result);\n\n// function test(arr, func1) {\n//   for(let i = 0;  i< arr.length; i++) {\n//     arr[i] = func1(arr[i]);\n//   };\n//   return arr;\n// };\n\n// let result = test(\n//   [1, 2, 3, 4, 5, 6],\n//   function(num) {return Math.pow(num, 3)}\n// );\n// console.log(result);\n\n// function test(num1, num2) {\n//   function sqrt(num) {\n//     return Math.pow(num, 2);\n//   }\n//   return sqrt(num1) + sqrt(num2);\n// }\n\n// console.log(test(2, 3));\n\n/*Сделайте функцию func, которая параметрами \r\nбудет принимать два числа, а возвращать сумму \r\nквадрата первого числа с кубом второго числа. \r\nСделайте для этого вспомогательную функцию square, \r\nвозводящую число в квадрат, и вспомогательную функцию \r\ncube, возводящую число в куб.\r\n*/\n\n// function test(num1, num2) {\n//   function sqrt(num) {\n//     return Math.pow(num, 2);\n// };\n//   function cube(num) {\n//     return Math.pow(num, 3);\n//   }\n//   return sqrt(num2) + cube(num1);\n// };\n\n// console.log(test(5, 30));\n\n// function test() {\n// \tlet num = 1;\n\n// \tfunction func() {\n// \t\tconsole.log(num);\n// \t}\n\n// \tfunc();\n// }\n\n// test();\n\n// function test() {\n// \tlet num = 1;\n\n// \tfunction func1() {\n// \t\tconsole.log(num);\n// \t}\n// }\n\n// test();\n\n// function func1() {\n// \treturn function() {\n// \t\treturn '!';\n// \t};\n// }\n// console.log(func1());\n// let result = func1();\n// console.log( result ); // выведет '!'\n\n/*\r\nСделайте функцию func1, которая будучи вызвана вот так:\r\n func1()(), вернет число 1. Сделайте аналогичную функцию \r\n func2, возвращающую число 2. Найдите сумму результатов \r\n этих функций.\r\n */\n\n// function func1() {\n//   return function() {\n//     return 1\n//   }\n// };\n\n// function func2() {\n//   return function() {\n//     return 2;\n//   }\n// };\n\n// console.log(func1()() + func2()());\n\n// function print() {\n//   return function(str) {\n//     console.log(str);\n//   }\n// };\n\n// print()('4321');\n// let arr = [];\n// function test (num1) {\n//   return function(num2) {\n//     return function(num3) {\n//       return function( num4) {\n//         return function (num5) {\n//           return function () {\n//         arr.push(num1, num2, num3, num4, num5, undefined );\n\n//             return arr;\n//           }\n//         }\n//       }\n//     }\n//   }\n// }\n// test(1)(2)(3)(4)(5)();\n// // console.log(String(test()()()()()));\n// console.log(arr);\n\n// function each(arr, callback) {\n//   let resArray = [];\n//   for(let elem of arr) {\n//     resArray.push(callback(elem));\n//   }\n//   return resArray;\n// };\n\n// let result = each([1, 2, 3, 4, 5, 6], function(num) {return num * num});\n\n// console.log(result);\n\n/*Дан массив с числами. С помощью созданной нами функции\r\n each увеличьте каждый элемент в два раза.\r\n */\n\n//  let array = [4, 5, 6, 7, 8];\n//  let resArray = [];\n\n//  function each(arr, callback) {\n//   for(let elem of arr) {\n//     resArray.push(callback(elem));\n//   }\n//   return resArray;\n//  };\n\n//  let result = each(array, function(num) {return num * 2});\n\n//  console.log(result);\n\n// let array = ['abc', 'def', 'ghj', 'klm', 'oprst'];\n\n// function backTo(arr, callback) {\n//   let backArray = [];\n//   for(let str of arr) {\n//     backArray.push(callback(str));\n//   }\n//   return backArray;\n// };\n\n// let result = backTo(array, function(elem) {return elem.split('').reverse().join('')});\n\n// console.log(result);\n\n// let result1 = backTo(array, function(elem) {return elem.slice(0,1).toUpperCase() + elem.slice(1)});\n// console.log(result1);\n// let array = [4, 5, 6, 7, 8, 9];\n\n// function back(arr, callback) {\n//   let newArr = [];\n//   for (let elem of arr) {\n//     newArr.push(callback(elem));\n//   }\n//   return newArr;\n// };\n\n// function square(num) {\n//   return Math.pow(num,2);\n// };\n\n// function cube(num) {\n//   return Math.pow(num, 3);\n// };\n\n// let result = back(array, square);\n// console.log(result);\n\n// console.log(back(result, cube));\n\n// let result = filter([1, 2, 3, 4, 5], function(elem) {\n// \tif (elem > 0) {\n// \t\treturn true;\n// \t} else {\n// \t\treturn false;\n// \t}\n// });\n\n// let result1 = filter([1, 2, 3, 4, 5], elem => elem > 0);\n// console.log(result1);\n\n// let func1 = (function func2() {\n//   let num = 5;\n//   return function () {\n//     num--;\n//     if (num >= 0) {\n//       console.log(num);\n//     } else  {\n//       num = 5;\n//     };\n//   };\n// })();\n\n// func1();\n// func1();\n// func1();\n// func1();\n// func1();\n// func1();\n// func1();\n// func1();\n// func1();\n// func1();\n// func1();\n// func1();\n// func1();\n// func1();\n\n// let test = function func1(arr) {\n//   console.log(arr.shift(), arr);\n//   if(arr.length != 0) {\n//     func1(arr);\n//   }\n// };\n// test(arrow);\n\n// let arrow = [1, 2, 3, 4, 5];\n\n// function getSquaresSum(arr) {\n//   let sum = Math.pow(arr.shift(),2);\n//   if(arr.length !== 0 ) {\n//     sum += getSquaresSum(arr);\n//   }\n//   return sum;\n// }\n// console.log(getSquaresSum(arrow));\n\n// let arrow = [1, 2, 3, 4, 5];\n\n// function getSquaresSum(arr) {\n//   let sum = Math.pow(arr.shift(), 2);\n//   if(arr.length !== 0) {\n//     sum += getSquaresSum(arr);\n//   }\n//   return sum;\n// }\n// console.log(getSquaresSum(arrow));\n\n// let array = [\n// \t1,\n// \t[\n// \t\t2, 7, 8\n// \t],\n// \t[\n// \t\t3, 4, [5, [6, 7]],\n// \t]\n// ];\n\n// function elemOfArr(arr) {\n//   for(let elem of arr) {\n//     if (typeof elem  == 'object'){\n//       elemOfArr(elem);\n//     } else {\n//       console.log(elem);\n//     }\n//   }\n// };\n// console.log(elemOfArr(array));\n\nvar obj = {\n  a: 1,\n  b: {\n    c: 2,\n    d: 3,\n    e: 4\n  },\n  f: {\n    g: 5,\n    j: 6,\n    k: {\n      l: 7,\n      m: {\n        n: 8,\n        o: 9\n      }\n    }\n  }\n};\n\n// let keyArr = [];\n// let elemArr = [];\n\n// function flatObj(obj) {\n//   for (let key in obj) {\n//     keyArr.push(key);\n\n//     if (typeof obj[key] === \"object\") {\n//       flatObj(obj[key]);\n//     } else {\n//       elemArr.push(obj[key]);\n//     }\n//   }\n// }\n\n// flatObj(obj);\n\n// console.log(keyArr); // Array of keys: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'j', 'k', 'l', 'm', 'n', 'o']\n// console.log(elemArr); // Array of values: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n// let arrow = [1, [2, 7, 8], [3, 4, [5, [6, 7]]]];\n\n// function summOfArr(arr) {\n//   let sum = 0;\n//   for (let elem of arr) {\n//     if (Array.isArray(elem)) {\n//       sum += summOfArr(elem);\n//     } else {\n//       sum += elem;\n//     }\n//   }\n//   return sum;\n// };\n// console.log(summOfArr(arrow));\n\n// let array  = ['a', ['b', 'c', 'd'], ['e', 'f', ['g', ['j', 'k']]]];\n// console.log( Array.isArray(array));\n// function test(arr) {\n//   let str = '';\n//   for(let elem of arr) {\n//     if (Array.isArray(elem)) {\n//       str += test(elem);\n//     } else {\n//       str += elem;\n//     }\n//   }\n//   return str;\n// };\n\n// console.log(test(array));\n\n// let sqr = 2;\n//   let newArr = [];\n//   for (let i = 0; i < arr.length; i++) {\n//     if (Array.isArray(arr[i])) {\n//       newArr.push(test(arr[i], sqr));\n//     } else {\n//       newArr.push(Math.pow(arr[i], sqr));\n//     }\n//   }\n//   return newArr;\n// };\n\n// console.log(test(array, 6));\n\n// let newArr = arr.map((elem, index, arr) => {\n\n//   // console.log(arr);\n//   console.log(elem);\n//   console.log(index + \"!\");\n//   return index * elem * 4\n// });\n// console.log(newArr);\n/*\r\n  Дан массив с числами. Используя метод map \r\n  извлеките из каждого элемента массива квадратный\r\n  корень и запишите результат в новый массив.\r\n  */\n//   let arr = ['qwe', 'asd', 'erty', 'rtyrt', 'rtyrty'];\n//  let newArr = arr.map( elem => {return elem.split('').reverse().join('')});\n\n//  console.log(newArr);\n\n//  let arr = ['123', '456', '789'];\n\n//  let newArr = arr.map((elem, index) => {return index * elem});\n\n//  console.log(newArr);\n\n// let arr = [12, 7, 8, 9,  13, 17, 6];\n\n// let newArr = arr.filter((elem, index) => elem * index > 50);\n\n// console.log(newArr);\n// let arr =  [1, 2, [3, 4], 5, [6, 7]];\n\n// let newArr = arr.filter( elem => typeof elem !== 'object');\n\n// console.log(newArr);\n\n// function func1(n1, n2, n3, n4, n5, n6, n7, n8) {\n// \treturn (n1 + n2 + n3 + n4) * (n5 + n6 + n7 + n8);\n// }\n\n// console.log( func1(1, ...[2, 3, 4], 5, ...[6], ...[7, 8]) );\n\n// let arr = [1, 2, 3, 4, 5];\n\n// let newArr = Math.min(...arr);\n\n// console.log(newArr);\n\n// function func1(...nums) {\n//   let middlesum = 0;\n//   let sum = 0;\n//   for (let elem of nums) {\n//     sum += elem;\n//     middlesum = sum / nums.length;\n//   }\n//   console.log(nums);\n//   console.log(sum);\n//   console.log(middlesum);\n// }\n\n// func1(1, 2, 3, 4, 5, 6, 7);\n\n// let arr1 = ['a', 'b', 'c'];\n// let arr2 = [1, 2, 3];\n// let newArr  = ['a', 'b', ...arr2, 'c'];\n// console.log(newArr);\n\n// let newStr = (s1, s2, s3, s4, s5, s6) => {\n//   return s1 + '-' + s2 + '-' + s3 + '-' + s4 + '-' + s5 + '-' + s6;\n// };\n// let str = 'abcdef';\n// console.log(newStr(...str));\n\n// let arr3 = [...str];\n// let arNum = 123456;\n\n// arr3 = [...String(arNum)];\n// console.log(arr3);\n\n// let result = merge([1, 2, 3], [4, 5, 6], [7, 8, 9]);\n// let finish = [];\n// function merge(...arr) {\n// console.log(arr); // выведет [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n// let finish = [].concat(...arr);\n// console.log(finish + 'woeiurwoeiruoweiur');\n\n// };\n\n// console.log(result); // выведет [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n// let arr1 = [1, 2, 3];\n// let arr2 = [4, 5, 6];\n// let arr3 = [7, 8, 9];\n\n// let res = arr1.concat(arr2, arr3);\n// console.log(res + '!!!!!!!!!!!!');\n\n// let arr = ['John', 'Smit', 'development', 'programmer', 2000];\n// let [name, surname, department, position, salary ] = arr;\n\n// console.log(name, surname);\n\n// // let name       = arr[0];\n// // let surname    = arr[1];\n// // let department = arr[2];\n// // let position   = arr[3];\n// // let salary     = arr[4];\n\n// function func1() {\n// \treturn [2025, 12, 31];\n// }\n\n// let [year, month, day] = func1();\n\n// function func2() {\n// \treturn ['John', 'Smit', 'development', 'programmer', 2000];\n// }\n\n// let [name, surname, department , position, salary] = func2();\n\n// // let name       = arr[0];\n// // let surname    = arr[1];\n// // let department = arr[2];\n// // let position   = arr[3];\n// // let salary     = arr[4];\n// console.log(department);\n// let arr = ['John', 'Smit', 'development', 'programmer', 2000];\n\n// function func1() {\n//   return ['John', 'Smit', 'development', 'programmer', 2000]\n// };\n\n// let [, , department, position, ,] = func1();\n\n// console.log(position);\n// console.log(func1());\n\n// let department = arr[2];\n// let position   = arr[3]\n\n// let arr = [2015, 12, ];\n// let [year, month, day = 1] = arr;\n// console.log(year);\n// console.log(day);\n\n// let arr = ['John', 'Smit', 'development', ];\n// let [name, surname, department, position = 'trainee'] = arr;\n\n// console.log(name, department, position);\n// let arr = [ , , ];\n\n// function funcDay() {\n//   return (new Date).getDate();\n// };\n// console.log(funcDay());\n\n// function funcMonth() {\n//   return (new Date).getMonth() + 1;\n// };\n// console.log(funcMonth());\n\n// function funcYear() {\n//   return (new Date).getFullYear();\n// };\n// console.log(funcYear());\n\n// let [year = funcYear(), month = funcMonth(), day = funcDay()] = arr;\n\n// console.log(year);\n// console.log(month);\n// console.log(day);\n\n// let obj1 = {\n// \tyear:  2025,\n// \tmonth: 12,\n// \tday:   31,\n// };\n\n// let {year, month, day} = obj1;\n// console.log(year);\n// console.log(Object.keys(obj1)[0], year);\n\n// console.log(String(Object.values(obj1)[2]))\n\n// let options = {\n// \tcolor: 'red',\n// \twidth:  400,\n// \theight: 500,\n// };\n\n// let {height: w = 400, color: c = 'green'} = options;\n\n// console.log(w);\n\n// let {color: c, width: w, height: h} = options;\n// console.log(c);\n// console.log(h);\n\n// let {color,  width,  height} = options;\n// // let color  = options.color;\n// // let width  = options.width;\n// // let height = options.height;\n\n// console.log(color);\n\n// let options = {\n\n// \twidth:  400,\n// \theight: 500,\n// };\n\n// let {color: c = 'black', width: w, height: h} = options;\n// console.log(options);\n// console.log(w);\n// console.log(h);\n// console.log(c);\n\n// let color;\n// if (options.color !== undefined) {\n// \tcolor = options.color;\n// } else {\n// \tcolor = 'black';\n// }\n\n// let width  = options.width;\n// let height = options.height;\n\n// let obj1 = {\n// \tyear:  2025,\n// \tmonth: undefined,\n// \tday:   31,\n// };\n\n// let year, month, day;\n// ({year, month: m = 10, day} = obj1);\n// console.log(year);\n// console.log(m);\n\n// function test(str2,[year1, month1, day1], [year2, month2, day2], str1) {\n//   console.log(str2);\n\n//   console.log(year1);\n//   console.log(month1);\n//   console.log(day1);\n\n//   console.log(year2);\n//   console.log(month2);\n//   console.log(day2);\n\n//   console.log(str1);\n// };\n// test('wow wow wow',[2025, 12, 31], [2030, 11, 30], 'bla bla bla');;\n\n// function func(employee) {\n// \tlet name       = employee[0];\n// \tlet surname    = employee[1];\n// \tlet department = employee[2];\n// \tlet position   = employee[3];\n// \tlet salary     = employee[4];\n// }\n// function func1([name, surname, department, position, salary]) {\n//   console.log(name);\n//   console.log(surname);\n//   console.log(department);\n//   console.log(position);\n//   console.log(salary);\n// };\n// func1( ['John', 'Smit', 'development', 'programmer', 2000] );\n\n// function func1([name, surname, info = 'defaultInfo', ...rest]) {\n// console.log(name);\n// console.log(surname);\n// console.log(info);\n// console.log(rest);\n// }\n\n// func1( ['John', 'Smit', 'development', 'programmer', 2000] );\n\n// function func1(str, [name, surname], [year, month, date]) {\n// \tconsole.log(year);\n//   console.log(str);\n//   console.log(name);\n// }\n\n// func1( 'development', ['John', 'Smit'], [2018, 12, 31] );\n\n// function func1({color, width, height}) {\n// \tconsole.log(color);\n//   console.log(width);\n//   console.log(height);\n// }\n\n// func1( {color: 'red', width: 400, height: 500} );\n\n// function func1({color = 'black', width, height}) {\n\n// \tconsole.log(color);\n//   console.log(width);\n//   console.log(height);\n\n// };\n\n// func1( {color: undefined, width: 400, height: 500} );\n\n// let date = new Date();\n\n// date.getFullYear();\n// console.log(date.getUTCHours());\n// console.log((date.getMonth() + 1));\n// console.log(date.getDay());\n\n// console.log(date.getFullYear()); // год\n// console.log(date.getMonth());    // месяц\n// console.log(date.getDate());     // день\n\n// console.log(date.getHours());    // часы\n// console.log(date.getMinutes());  // минуты\n// console.log(date.getSeconds());  // секунды\n\n// let date = new Date();\n\n// console.log(\n//   date.getDate() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getFullYear()\n// );\n\n// function addZero(num) {\n//   if(num >= 0 && num <= 9) {\n//     return '0' + num;\n//   } else {\n//     return num;\n//   }\n// };\n// console.log(addZero(1));\n// console.log(\n//   addZero(date.getDate()) + \"-\" + addZero((date.getMonth() + 1)) + \"-\" + addZero(date.getFullYear()));\n\n// let str = '2025-12-31';\n// let newStr = str.split('-').reverse().join('/');\n// console.log(newStr);\n\n// let date = new Date();\n\n// console.log(date.getDate());\n// console.log(date.getDay());\n\n// let date = new Date();\n\n// let day = date.getDay();\n// console.log(day);\n\n// let days = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'];\n// let currentDay = days[day];\n// console.log(currentDay);\n\n// let month = date.getMonth();\n// console.log(month);\n\n// let monthYear =  [\n//   'янв', 'фев', 'мар', 'апр', 'май', 'июн',\n//   'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'\n// ];\n\n// let currentMonth = monthYear[month];\n// console.log(currentMonth);\n\n// let day = date.getDay();\n\n// let days = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'];\n\n// console.log(days[day]);\n\n// let time = date.getTime();\n// console.log(time);\n// let date = new Date(2018, 0, 35);\n// console.log(date); // получится 4 февраля\n\n// function createDate(arr) {\n//   return new Date(arr[0], arr[1], arr[2]);\n// }\n\n// let arr = [2020, 3, 0];\n// let date = createDate(arr);\n\n// console.log(date.getDate());\n\n// let  func1 = () => {\n//   console.log('!!!!!!!!!!!!!')\n// };\n\n// let button1 = document.querySelector('#button1');\n// button1.addEventListener('click', func1);\n\n// let button2 = document.querySelector('#button2');\n// button2.addEventListener('click', func1);\n\n// function func1() {\n// \tconsole.log('message');\n// };\n\n// let elem1 = document.querySelector('#elem1');\n// let elem2 = document.querySelector('#elem2');\n// let elem3 = document.querySelector('#elem3');\n// let elem4 = document.querySelector('#elem4');\n// let elem5 = document.querySelector('#elem5');\n\n// elem1.addEventListener('click', func1);\n// elem2.addEventListener('click', func1);\n// elem3.addEventListener('click', func1);\n// elem4.addEventListener('click', func1);\n// elem5.addEventListener('click', func1);\n\n// function func1() {\n// \tconsole.log('1');\n// }\n\n// function func2() {\n// \tconsole.log('2');\n// };\n\n// let button = document.querySelector('#button');\n// button.addEventListener('click', func1);\n// button.addEventListener('click', func2);\n\n// function func1() {\n// \tconsole.log('1');\n// };\n\n// function func2() {\n// \tconsole.log('2');\n// };\n\n// function func3() {\n// \tconsole.log('3');\n// };\n\n// let article = document.querySelector('#elem');\n\n// article.addEventListener('click', func1);\n// article.addEventListener('click', func2);\n// article.addEventListener('click', func3);\n\n// let box = document.querySelector('#box');\n// console.log(box);\n// box.addEventListener('mouseover', test);\n// box.addEventListener('mouseout', mouseOn);\n\n// function test() {\n//   alert('!!!!!');\n// };\n\n// function mouseOn() {\n//   alert('UUUUUUUUUUUUUU')\n// };\n\n// box.addEventListener('mouseout', test);\n\n// let text = document.querySelector('#elem');\n// console.log(text.textContent);\n// text.textContent = ('Дан абзац и кнопка. По клику на кнопку прочитайте текст абзаца и выведите его в консоль.')\n\n// let button = document.querySelector('#button');\n// console.log(button);\n// let article = document.querySelector('#elem');\n// console.log(article);\n// button.addEventListener('dblclick', readText);\n// function readText() {\n// console.log(article.textContent);\n// };\n\n// button.addEventListener('click', changeText);\n// function changeText() {\n//   article.textContent = ('New text content from me');\n// };\n\n// article.addEventListener('click', changeText);\n\n// let button = document.querySelector('#button');\n// let elem1 = document.querySelector('#elem1');\n// let elem2 = document. querySelector('#elem2');\n// let elem3 = document.querySelector('#elem3');\n\n// button.addEventListener('click', getSumm);\n\n// function getSumm() {\n//   // let summ = 0;\n//   elem3.textContent = (Number(elem1.textContent) + Number(elem2.textContent));\n// };\n\n// Дан абзац с числом и кнопка. \n// По нажатию на кнопку прибавьте к значению \n// абзаца единицу и запишите полученное число обратно.\n\n// let button = document.querySelector('#button');\n\n// let elem1 = document.querySelector('#elem1');\n// button.addEventListener('click' , test);\n\n// function test() {\n//   return elem1.textContent = (Number(elem1.textContent) + 1);\n// };\n/*\r\nДан абзац с текстом и кнопка. \r\nПо нажатию на кнопку запишите в конец текста абзаца \r\nвосклицательный знак.\r\n*/\n\n// let elem2 = document.querySelector('#elem2');\n\n// button.addEventListener('dblclick', addSymb);\n// let str = '!!!!!!!!!!!!!!!!!!';\n\n// function addSymb(){\n//   elem2.textContent = (elem2.textContent + str);\n// };\n\n// let elem1 = document.querySelector('#elem1');\n// let button = document.querySelector('#button');\n// button.addEventListener('click', test);\n// function test() {\n//   return elem1.innerHTML = `<i> ${elem1.textContent} <i>`;\n// };\n\n// let elem = document.querySelector('#elem');\n// console.log(elem.id);\n// console.log(elem.type);\n// elem.id = 'submit';\n// console.log(elem.id);\n\n/*\r\n  \r\n<input id=\"elem\" type=\"email\">\r\nДана также кнопка. По нажатию на кнопку\r\nвыведите на экран содержимое атрибута type указанного выше инпута.\r\n*/\n\n// let button = document.querySelector('#button');\n\n// let elem = document.querySelector('#elem');\n// console.log(elem.type);\n\n// button.addEventListener('click', test);\n\n// function test() {\n//  elem.type = 'submit';\n//  console.log(elem.type);\n// };\n\n// let button = document.querySelector('#button');\n// let elem = document.querySelector('#elem');\n\n// console.log('Исходный тип элемента:', elem.type);\n\n// button.addEventListener('click', test);\n\n// function test(event) {\n//     // Предотвращаем стандартное поведение кнопки submit (отправку формы)\n//     event.preventDefault();\n\n//     // Меняем тип элемента\n//     elem.type = 'submit';\n\n//     console.log('Тип элемента после изменения:', elem.type);\n// };\n\n/*\r\nПусть у вас есть ссылка в виде тега a, кнопка и абзац.\r\nПо нажатию на кнопку выведите в абзац содержимое атрибута\r\nhref ссылки.\r\n*/\n\n// let button = document.querySelector('#button');\n// console.log(button);\n// let href = document.querySelector('#myLink');\n// console.log(href);\n// let paragraf = document.querySelector('#outputParagraph');\n// console.log(paragraf);\n\n// button.addEventListener('click', test);\n// function test() {\n//   return paragraf.innerHTML = href.href;\n// };\n\n// // Получаем элемент ссылки по его идентификатору\n// var linkElement = document.getElementById(\"myLink\");\n\n// // Получаем значение атрибута href\n// var hrefValue = linkElement.getAttribute(\"href\");\n// console.log(hrefValue);\n\n// // Выводим значение атрибута href в элемент абзаца\n// document.getElementById(\"outputParagraph\").innerText = \"Содержимое атрибута href: \" + hrefValue;\n\n/*\r\nПусть у вас есть ссылка и кнопка. \r\nПо нажатию на кнопку добавьте в конец текста \r\nссылки содержимое ее атрибута href в круглых скобках.\r\n*/\n\n// let button = document.getElementById('button');\n// console.log(button);\n// let hrefValue = document.querySelector('#myLink')\n// console.log(hrefValue);\n\n// button.addEventListener('dblckick', test);\n\n// function test() {\n//   return hrefValue.textContent = \n// };\n\n/*\r\nПусть у вас есть картинка. Разместите ее на странице с помощью тега img. \r\nПусть даны также кнопка и абзац. Сделайте так, чтобы по клику на кнопку \r\nв абзац записался путь к картинки из ее атрибута src.\r\n*/\n\n//# sourceURL=webpack:///./src/js/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/script.js"]();
/******/ 	
/******/ })()
;