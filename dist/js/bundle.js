/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/script.js":
/*!**************************!*\
  !*** ./src/js/script.js ***!
  \**************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n// import _ from 'lodash';\n// let maxElem = 0;\n// let key_maxElem = 0;\n// const { name } = require(\"browser-sync\");\n// let arr = [1, 2, 6, 4, 5, 3];\n// for(let i = 0;  i < arr.length - 1; i++) {\n//   if(arr[i] > maxElem) {\n//     maxElem = arr[i];\n//     key_maxElem = i;\n//   }\n//     if( arr[i] !== maxElem && i !== key_maxElem) {\n//       arr[i] = 0;\n//     }\n// }\n// console.log(maxElem);\n// console.log(key_maxElem);\n// // for(let i = 0;  i <= arr.length - 1; i++) {\n// // }\n// console.log(arr);\n/*  HOMEWORK 9 \r\nПереписати код нижче з використанням конструкції switch…case*/\n/*   ИСХОДНЫЙ КОД:\r\n\r\nlet numOrStr = prompt('input number or string');\r\nconsole.log(numOrStr)\r\n\r\nif(numOrStr === null) {\r\nconsole.log('ви скасували')\r\n} else if( numOrStr.trim() === '' ) {\r\nconsole.log('Empty String');\r\n} else if ( isNaN( +numOrStr ) ) {\r\nconsole.log(' number is Ba_NaN')\r\n} else {\r\nconsole.log('OK!')\r\n}\r\n\r\n        РЕШЕНИЕ ДОМАШНЕГО ЗАДАНИЯ С ИСПОЛЬЗОВАНИЕМ switch / case    */\n/*\r\nlet numOrStr = prompt('input number or string');\r\nconsole.log(numOrStr)\r\n\r\nswitch(true) {\r\n  case numOrStr === null:\r\n    console.log('ви скасували');\r\n  break;\r\n  case  numOrStr === '':\r\n    console.log('Empty String');\r\n  break;\r\n  case isNaN( +numOrStr ):\r\n    console.log(' number is Ba_NaN');\r\n  break;\r\n  default:\r\n    console.log('OK!');\r\n  break;\r\n}\r\n\r\n*/\n/*      Hometask additional \"Check - list\"\r\n        \r\n       FALSE\r\nconsole.log(Boolean(0));         // false\r\nconsole.log(Boolean(+0));        // false\r\nconsole.log(Boolean(-0));        // false\r\nconsole.log(Boolean(null));      // false\r\nconsole.log(Boolean(''));        // false\r\nconsole.log(Boolean(NaN));       // false\r\nconsole.log(Boolean(undefined)); // false\r\n          \r\n          TRUE\r\n\r\nconsole.log(Boolean('string'));   // true\r\nconsole.log(Boolean(+Infinity));  // true  \r\nconsole.log(Boolean(-Infinity));  // true\r\nconsole.log(Boolean('number'));   // true\r\n\r\n        ACHTUNG,  STRING!!!\r\n\r\nconsole.log(Boolean('0'));         // true\r\nconsole.log(Boolean('false'));     // true\r\nconsole.log(Boolean('NaN'));       // true\r\nconsole.log(Boolean('null'));      // true\r\nconsole.log(Boolean('undefined')); // true\r\n*/\n/*\r\n  1 const/let\r\n  2 variable names\r\n  3 correct output\r\n*/\n// HOME TASK - TO READ BY YOURSELF\n/*number.toString()\r\n\r\n10.toString();\r\n\r\nJS воспринмимает эту запись как попытку обратьтся к числу с плавающей точкой\r\nто есть к десятичной дроби. \r\nЧто бы избежать этого надо использовать один из методов изменения записи ЦЕЛЫХ чисел перед \r\ntoString() \r\n\r\nvar number = 10;\r\nnumber.toString(); или\r\n10..toString();     или\r\n10 .toString();    или\r\n(10).toString();   \r\n\r\nВ то же время проблем с действительными дробными числами не возникает и \r\nзапись может быть такова: \r\n\r\n12.5.toString(); // 12.5 преобразовывается в строку без проблем.\r\n\r\n\r\n\r\n\r\n// javascript number literal to string problem \r\n\r\n/*\r\nnumber\r\nnumber -> string\r\nnumber -> boolean (0, NaN -> false / ALL -> true)\r\n\r\n// const number = 10;\r\n// const string1 = number.toString(); // вернет '10'\r\n// const string2 = String(number);    // вернет '10'\r\n// const string3 = number + '';       // вернет '10'\r\n// const string4 = `${number}`;       // вернет '10'\r\n// const boolean = Boolean(number);   // // вернет true (Boolean)\r\n*/\n/*\r\nstring\r\nstring -> number\r\nstring -> boolean ('' -> false / all other -> true)\r\n\r\n// const string = '10';\r\n// const number1 = Number(string);  // вернет 10 как число.\r\n// const number2 = +string;         // вернет 10 как число.\r\n// const number3 = string / 5;      // вернет 2 как число\r\n// const boolean = Boolean(string); //вернет true как булево значение\r\n*/\n/*\r\nconst a;\r\nString(a);\r\nNumber(a);\r\nBoolean(a);\r\n\r\nundefined -> string -> 'undefined' \r\nundefined -> number -> NaN\r\nundefined -> boolean -> false\r\n*/\n/*\r\nnull -> string -> 'null'\r\nnull -> number -> 0\r\nnull -> boolean -> false\r\n*/\n/*\r\nboolean -> string -> 'true'/'false'\r\nboolean -> number -> 1 / 0\r\n*/\n// HOMETASK 2 - > create a table with all transformations\n// ------\n// WTF JS  ---------------  просмотрено но не осознано )))\n// const a = 10;\n// const b = '10';\n// const c = true;\n// let check1 = '1' == boolean;\n// const check2 = check1 == Boolean(check1); // true\n// const checkToNumber1 = a === Number(b);  // false\n// const checkToString1 = String(a) === b;  // true\n// const checkToNumber2 = a !== Number(b);  // false\n// const checkToString2 = String(a) !== b;  // false\n// const checkToNumber3 = a != Number(b);   // false\n// const checkToString3 = String(a) != b;   // false\n// a === b => true  ???? //false так как ф - число а b - строка!!!!\n// 1 !== 1 => false\n// 1 === 2 => false\n// 1 !== 2 => true\n// if (check1) {\n//   alert('YES, THEY ARE EQUAL!');\n// }\n// if (check2) {\n//   // DO THIS\n// }\n// const a = 10;\n// const b = '10';\n// const equal = a === b; // false\n// // const notEqual = a !== b; // true\n// const notEqual1 = !a; // false\n// const notEqual2 = !b; // false\n// const notEqual3 = !equal; // true\n// const a = !!alert(1); // false\n// const b = !!10; // true\n// const c = !!'10'; // true\n// const d = !!''; // false\n// Boolean(myVariable);\n// const a = !myVar; // true/false\n// const b = !a; // false/true\n// const c = +b; // 0/1\n// const d = (+(!(!myVar)));\n// const string = 'a';\n// const number = Number(string);\n// const a = true || ...; // -> true\n// const c = false && ...; // -> false\n// let arr = [1, 2, 3, 4, 5];\n// let count;\n// for(let item of arr) {\n//   console.log(item);\n// }\n// console.log(arr.length + '  length');\n// let test = function func() {\n//   console.log('!');\n//   test();\n// }\n// test();\n// let obj = {\n//   func1: function() {return 1},\n//   func2: function() {return 2},\n//   func3: function() {return 3},\n//   func4: function() {return 4}\n// };\n// console.log(obj.func1() + obj.func2() + obj.func3() + obj.func4());\n// for(let elem in obj) {\n//   console.log(elem());\n//   let summ = 0;\n//   summ += elem();\n// }\n// let math = {\n//   square: function(num) {return num + num},\n//   cube: function(num) {return (num * num) + (num * num)},\n//   cube1: function(num) {return (num * num* num) + (num * num * num)},\n// };\n// console.log(math.square(2));\n// console.log(math.cube(2));\n// console.log(math.cube1(2));\n// let test = function(func1, func2, func3) {\n// console.log(func1() + func2() + func3());\n// };\n// test(function() {return 1}, function() {return 2}, function() {return 3});\n// let func1 = () => {return 1};\n// let func2 = () => { return 2};\n// let func3 = () => {return 88};\n// let test = (fu1, fu2, fu3) => {\n//   console.log(fu1() + fu2() + fu3());\n// };\n// test(func1, func2, func3);\n// let test =(num, func1, func2) => {\n//   console.log(func1(num) + func2(num));\n// };\n// let f1 = (num) => { return num * num };\n// let f2 = (num) => { return num * num * num};\n// test(3, f1, f2);\n// let test = (arr, func) => {\n//   for(let i = 0; i < arr.length; i++) {\n//     arr[i] = func(arr[i]);\n//   }\n//   return arr\n// };\n// let arr = [3, 4, 5, 6, 7];\n// let f1 = (num) => { return num ** 3};\n// let result = test(arr, f1);\n// console.log(result);\n// let func = (num1, num2) => {\n//   return num1 * num1 + num2 * num2;\n// };\n// console.log(func(2,3));\n// let test =(num1, num2) => {\n//   let square =(num) => {\n//     return num * num\n//   };\n//   return square(num1) + square(num2);\n// };\n// let result = test(4,5);\n// console.log(result);\n/*\r\nСделайте функцию func, которая параметрами будет принимать два \r\nчисла, а возвращать сумму квадрата первого числа с кубом второго числа.\r\n Сделайте для этого вспомогательную функцию square, возводящую число в \r\n квадрат, и вспомогательную функцию cube, возводящую число в куб.\r\n*/\n// let func =(num1, num2) => {\n// let square = (num) => {return num * num};\n// let cube = (num) => {return Math.pow(num, 3)};\n//   return square(num2) + cube(num1);\n// };\n// let result = func(23,3);\n// console.log(result);\n// let func1 = () => {\n//   let func2 =() => {\n//     let func3 = () => {\n//       let func4 = () => {\n//         return '!';\n//       };\n//       return func4;\n//     };\n//     return func3;\n//   };\n//   return func2;\n// };\n// let result = func1()()()();\n// console.log(result);\n// let func1 = (num1) => {\n//   return function(num2) {\n//     return num1 + num2;\n//   }\n// };\n// console.log( func1(4)(5));\n// let func = (num1) => {\n//   return function(num2) {\n//     return function (num3) {\n//       return num1 + num2 + num3;\n//     }\n//   }\n// };\n// console.log(func(2)(3)(4));\n// Сделайте функцию func, которая будучи вызвана вот\n// так: func(2)(3)(4)(5)(), вернет массив переданных в параметры чисел.\n// let func2 = (num1) => {\n//   let arr = [num1];\n//   return function (num2) {\n//     arr.push(num2);\n//     return function (num3) {\n//       arr.push(num3)\n//       return function (num4) {\n//         arr.push(num4);\n//         return arr;\n//       };\n//     };\n//   };\n// };\n// let func1 = (num1) => {\n//   let arr = [num1];\n//   return function (num2) {\n//     arr.push(num2);\n//     return function (num3) {\n//       arr.push(num3);\n//       return function (num4) {\n//         arr.push(num4);\n//         return arr;\n//       };\n//     };\n//   };\n// // };\n// let result = func2(2)(3)(4)(5);\n// console.log(result); // Выведет: [2, 3, 4, 5]\n// function each(arr, callback) {\n//   res = [];\n//   for(let elem of arr) {\n//     res.push(callback(elem));\n//   }\n//   return res;\n// }\n// let all = each(['abc', 'cde', 'fge'], function callback(str) {return str.charAt(0).toUpperCase() + str.slice(1)});\n// console.log(all);\n// let func2 = (num1, num2) => num1 * num2;\n// console.log(func2(2, 8));\n// let func = num => num * num;\n// console.log(func(50));\n// let result = filter([1, 2, 3, 4, 5], function(elem) {\n// \tif (elem > 0) {\n// \t\treturn true;\n// \t} else {\n// \t\treturn false;\n// \t}\n// });\n// let result = filter([1, 2, 3, 4, 5], elem => elem > 0);\n// console.log(result);\n// function test() {\n// \tlet num = 1;\n// \treturn function() {\n// \t\tconsole.log(num);\n// \t}\n// }\n// let func = test();\n// func(); // выведет 1\n// console.log(test()());\n// let counter =() => {\n//   let num = 1;\n//   return function() {\n//     console.log(num);\n//     num++\n//     return num;\n//   }\n// };\n// let res = counter();\n// res();\n// // console.log(res());console.log(res());console.log(res());console.log(res());console.log(res());\n// let countmin = () => {\n//   let num = 10;\n//   let innerCounter = () => {\n//     if( num <= 0) {\n//       console.log('Current count  '  + num);\n//       num--\n//       innerCounter();\n//     } else {\n//       console.log ('All is empty');\n//     }\n//   }\n//   return  innerCounter\n// };\n// let res = countmin();\n// res();\n/*\r\nlet countmin = () => {\r\n  let num = 10;\r\n  let innerCounter = () => {\r\n    if (num > 0) {\r\n      console.log('Current count:', num);\r\n      num--;\r\n      innerCounter(); // Рекурсивный вызов innerCounter\r\n    } else {\r\n      console.log('All is empty');\r\n    }\r\n  };\r\n\r\n  return innerCounter;\r\n};\r\n\r\nlet res = countmin();\r\nres(); // Вызывает цикл, выводя текущий счетчик от 10 до 1\r\n// // Теперь код будет выполнять цикл и выводить текущее значение счетчика до тех пор, пока num не станет меньше или равным 0, после чего будет выведено 'All is empty'.\r\n\r\n*/\n//  ЗАМЫКАНИЯ\n// let counter = 0;\n// function test() {\n// \treturn function() {\n// \t\tconsole.log(counter);\n// \t\tcounter++;\n// \t};\n// }\n// let func = test;\n// let func1 = func();\n// let func2 = func();\n// func1();\n// func2();\n// func1();\n// func2()\n// // let res = (() => {\n// //   return (num1) => {\n// //     return (num2) => {\n// //       let sum = num1 + num2;\n// //       return sum;\n// //     }\n// //   }\n// // }) ()(1)(2);\n// function curryAdd(x) {\n//   return function(y) {\n//     return function(z) {\n//       return x + y + z;\n//     };\n//   };\n// }\n// // / Использование функции без каррирования\n// // let resultWithoutCurry = add(1, 2, 3);\n// // console.log(resultWithoutCurry); // Выведет 6\n// // Использование функции с каррированием\n// let curryAddResult = curryAdd(1)(2)(3);\n// console.log(curryAddResult); // Выведет 6\n/*\r\n\r\n\r\nВ JavaScript существует несколько способов создания массива. Вот несколько из них:\r\n\r\nЛитерал массива:\r\n\r\njavascript\r\nCopy code\r\nconst array1 = [1, 2, 3, 4, 5];\r\nС использованием конструктора Array:\r\n\r\njavascript\r\nCopy code\r\nconst array2 = new Array(1, 2, 3, 4, 5);\r\nС использованием Array.from():\r\n\r\njavascript\r\nCopy code\r\nconst array3 = Array.from([1, 2, 3, 4, 5]);\r\nС использованием Array.of():\r\n\r\njavascript\r\nCopy code\r\nconst array4 = Array.of(1, 2, 3, 4, 5);\r\nС использованием Array() без аргументов (пустой массив):\r\n\r\njavascript\r\nCopy code\r\nconst emptyArray = Array();\r\nС использованием расширенного синтаксиса:\r\n\r\njavascript\r\nCopy code\r\nconst array5 = [...[1, 2, 3, 4, 5]];\r\nС использованием метода push():\r\n\r\njavascript\r\nCopy code\r\nconst array6 = [];\r\narray6.push(1, 2, 3, 4, 5);\r\nС использованием метода concat():\r\n\r\njavascript\r\nCopy code\r\nconst array7 = [].concat(1, 2, 3, 4, 5);\r\n*/\n/*\r\nconst array1 = [1, 2, 3, 4];\r\n\r\n// 0 + 1 + 2 + 3 + 4\r\nconst initialValue = 0;\r\nconst sumWithInitial = array1.reduce(\r\n  (accumulator, currentValue) => accumulator + currentValue,\r\n  initialValue,\r\n);\r\n\r\nconsole.log(sumWithInitial);\r\n// Expected output: 10\r\n\r\n*/\n// let arr = [1, 2, 3, 4, 5, 6, 7, 8];\n// arr.forEach(function(element) {\n//   console.log(element);\n// });\n// arr.forEach(function(element, index, arr) {\n//   numberOfElement = element * 7;\n//   console.log(`Элемент ${numberOfElement} имеет индекс ${index} в массиве [${arr}]`);\n// });\n// // Выводит 1, 2,\n// console.log(arr);\n// let squaredArr = arr.map(function(element) {\n//   return element * element;\n// });\n// console.log(squaredArr);\n// let arr0 = [1, 2, 3, 4, 5];\n// let arr1 = 'sdfsdfsdf';\n// console.log(arr0.at(-1))\n// let obj = {x: 1, y: 2, z: 3};\n// console.log( typeof obj['x'] );\n// const arr111 = ['a', 'b', 'c'];\n// arr111 = ['a', 'b', 'c'];\n// console.log(arr111);\n// let number = 1;\n// const doubleObj = {\n//   set x(value) {\n//     number = value;\n//   },\n//   get x() {\n//     return number * 2;\n//   },\n//   y() {\n//     return number * 2;\n//   },\n//   setX(value) {\n//     number = value;\n//   },\n//   getX() {\n//     return number;\n//   },\n// };\n// console.log(doubleObj.x); // Выведет: 2\n// console.log(doubleObj.y()); // Выведет: 2\n// doubleObj.x = 10;\n// doubleObj.setX(10);\n// console.log(doubleObj.x); // Выведет: 20\n// console.log(doubleObj.getX()); // Выведет: 10\n// let number = 1;\n// let obj = {\n//   set x(value) {\n//   number = value;\n//   },\n//   get x() {\n//     return number;\n//   }\n// };\n// obj.x = 20;\n// console.log(obj.x)\n// (function(){\n// let f = function() {\n//   return this.number ;\n// };\n// let obj1 = {\n//   number: 18,\n//   method: f,\n// };\n// let obj2 = {\n//   number: 28,\n//   method: f,\n// };\n// console.log(obj1.method());\n// console.log(obj2.method());\n// }());\n// class Users {\n//   #name;\n//   #sur;\n//   #age;\n//   constructor(name, sur, age) {\n//     this.#name = name;\n//     this.#sur = sur;\n//     this.#age = age;\n//   }\n//   setAge(newAge) {\n//     this.#age = newAge;\n//     return this;\n//   }\n//   setName(newName) {\n//     this.#name = newName;\n//     return this;\n//   }\n//   setSur(newSur) {\n//     this.#sur = newSur;\n//     return this;\n//   }\n//   getAge() {\n//     return this.#age;\n//   }\n//   getName() {\n//     return this.#name;\n//   }\n//   getSur() {\n//     return this.#sur;\n//   }\n// };\n// let user = new Users(\"Bill\", \"Davidson\", 89);\n// console.log(user);\n// console.log(user.Name);\n// user.setName('Gregory').setSur('Stivenson').setAge(68);\n// console.log(user.getName());\n// console.log(user instanceof Users);\nvar Student = /*#__PURE__*/_createClass(function Student(name) {\n  _classCallCheck(this, Student);\n  this.name = name;\n}); // class Employee {\n// \tconstructor(name) {\n// \t\tthis.name = name;\n// \t}\n// }\n// let users = [\n// \tnew Student('user1'),\n// \tnew Employee('user2'),\n// \tnew Student('user3'),\n// \tnew Employee('user4'),\n// \tnew Student('user5'),\n// \tnew Employee('user6'),\n// \tnew Student('user7'),\n// ];\n//  let studentsNames = [];\n//   let employees = [];\n// for (let i = 0; i <= users.length - 1; i++) {\n//   if(users[i] instanceof Student) {\n//     studentsNames.push(users[i].name);\n//   } else if( users [i] instanceof Employee) {\n//     employees.push(users[i].name);\n//   }\n//   // console.log(employees);\n// };\n// console.log(\"Students: \", studentsNames);\n// console.log(\"Employees: \", employees);\n// class HelperArray {\n//   getSum(arr) {\n//     let sum = 0;\n//     for(let elem of arr) {\n//       sum += elem;\n//     }\n//     return sum;\n//   }\n//   getArrithm(arr) {\n//     if(arr.length >0) {\n//       let sum = this.getSum(arr);\n//       return sum / arr.length;\n//     }else {\n//       return 0;\n//     }\n//   }\n// };\n// let arrHelper = new HelperArray();\n// let sum1 = arrHelper.getSum([4,5,6]);\n// console.log(sum1);\n// let r = arrHelper.getArrithm([4,5,6]);\n// console.log(r);\n// class City {\n//   nameOfCity;\n//   constructor(nameOfCity) {\n//     this.nameOfCity = nameOfCity;\n//   }\n// };\n// class Users {\n//   name;\n//   age;\n//   city;\n//   constructor(name, age, city) {\n//     this.name = name;\n//     this.age = age;\n//     this.city = city;\n//   }\n// };\n// let cityName = new City('London');\n// let user = new Users ('Mike', 60, cityName);\n// console.log(user.city.nameOfCity);\n// class Employee {\n// \tconstructor(name, position, department) {\n// \t\tthis.name = name;\n// \t\tthis.position = position;\n// \t\tthis.department = department;\n// \t}\n// };\n// class Departments {\n//   department;\n//   constructor(department) {\n//     this.department = department;\n//   }\n// };\n// class Positions {\n//   pos = 'manager';\n//   constructor(pos) {\n//     this.pos = pos;\n//   }\n// };\n// let newPosition = new Positions('Cheaf');\n// let newDepartment = new Departments('Logistic');\n// let worker = new Employee('Bill', newPosition.pos, newDepartment.department);\n// console.log(worker.name);\n// console.log(worker.position);\n// console.log(worker);\n// class Employee {\n//   #name;\n//   #salary;\n//   constructor(name, salary) {\n//     this.#name = name;\n//     this.#salary = salary;\n//   }\n//   getName() {\n//     return this.#name;\n//   }\n//   getSalary() {\n//     return this.#salary;\n//   }\n// };\n// let employee = [\n//   new Employee('Gregory', 90),\n//   new Employee('Kollins', 100),\n//   new Employee('Thomas', 120),\n//   new Employee('Henry', 400),\n// ];\n// for(let employee of employee) {\n//   console.log(employee.getName(), employee.getSalary());\n// }\n// class User {\n//   showName() {\n//     return this.cape(this.name)\n//   }\n//   showSur() {\n//     return this.cape(this.sur);\n//   }\n//   cape(elem) {\n//     return elem[0].toUpperCase() + elem.slice(1);\n//   }\n// };\n// let user = new User;\n// user.name = 'naomi';\n// user.sur = 'campbell';\n// // console.log(user.name);\n// console.log(user.showName(), user.showSur());\n// class Students {\n//   showLetterName() {\n//     return this.showCap(this.name);\n//   }\n//   showLetterSurn() {\n//     return this.showCap(this.surn);\n//   }\n//   firstLetterName() {\n//     return this.charToUpper(this.name);\n//   }\n//   firstLetterSur() {\n//     return this.charToUpper(this.surn);\n//   }\n//   showCap(str) {\n//     return str[0].toUpperCase() +  str.slice(1);\n//   }\n//   charToUpper(char) {\n//     return char.charAt(0).toUpperCase();\n//   }\n// }\n// let user = new Students();\n// user.name = \"mike\";\n// user.surn = \"davidson\";\n// console.log(user.showLetterName()); // Выведет \"Mike\"\n// console.log(user.showLetterSurn()); // Выведет \"Davidson\"\n// console.log(user.firstLetterName(), user.firstLetterSur());\n// class Usres {\n//   constructor(name, surn) {\n//     this.name = name;\n//     this.surn = surn;\n//   }\n//   show() {\n//     return this.name + '  ' + this.surn;\n//   }\n// };\n// let user = new Usres('Billy', 'Douel');\n// console.log(user.name);\n// console.log(user.surn);\n// console.log(user.show());\n// class Users {\n//   #name;\n//   #surn;\n//   constructor(name, surn) {\n//     this.#name = name;\n//     this.#surn = surn;\n//   }\n//   set Name(name) {\n//     return  this.name = name;\n//   }\n//   get Name() {\n//     return this.name\n//   }\n//   showUser(){\n//     console.log(this.#Cap(this.name) + ' sdfsdfsdfsdf' + this.#Cap(this.surn))\n//   }\n//   #Cap(str) {\n//     return str[0].toUpperCase() + str.slice(1);\n//   }\n// };\n// let user = new Users();\n// user.name = \"bill\" ;\n// user.surn = 'klinton';\n// console.log(user.name, user.surn);\n// console.log(user.showUser());\n// class Employee {\n// \tconstructor(name, salary) {\n// \t\tthis.name = name;\n// \t\tthis.salary = salary;\n// \t}\n// \tgetSalary() {\n// \t\treturn this.#addSign(this.salary);\n// \t}\n// \t#addSign(num) {\n// \t\treturn num + '$';\n// \t}\n// };\n// let worker = new Employee('John', 1500);\n// console.log(worker.name);\n// console.log(worker.salary);\n// console.log(worker.getSalary());\n/*\r\nclass Horses {\r\n  #weight;\r\n  #name;\r\n  #costs;\r\n  constructor(weight, name, costs) {\r\n    this.#weight = weight;\r\n    this.#name = name;\r\n    this.#costs = costs;\r\n  }\r\n  set Weight(weight) {\r\n    this.#weight = weight;\r\n  }\r\n  set Name(name) {\r\n    if (name.length > 3) {\r\n      this.#name = name;\r\n    } else {\r\n      console.log(\"Small name\");\r\n    }\r\n    this.#name = name;\r\n  }\r\n  set Costs(costs) {\r\n    this.#costs = costs;\r\n  }\r\n  get Weight() {\r\n    return this.#weight;\r\n  }\r\n  get Name() {\r\n    return this.#name;\r\n  }\r\n  get Costs() {\r\n    return this.#costs;\r\n  }\r\n  addToStado() {\r\n    if (!stado.some((horse) => horse.name === this.#name)) {\r\n      stado.push({\r\n        name: this.#name,\r\n        weight: this.#weight,\r\n        costs: this.#costs,\r\n      });\r\n      console.log(`Added to stado ${this.#name}`);\r\n    } else {\r\n      console.log(`The kon whith name ${this.#name} is alredy in STADO`);\r\n    }\r\n  }\r\n};\r\n\r\nlet kon = new Horses(450, \"Va\", 4500);\r\n\r\nlet stado = [];\r\n\r\nconsole.log(kon.Name);\r\nconsole.log(kon.addToStado());\r\nconsole.log(stado);\r\nkon.Name = 'Na';\r\n\r\n//  if (!stado.some(horse => horse.Name === this.#name)) {\r\n//   stado.push({ name: this.#name, weight: this.#weight, costs: this.#costs });\r\n//   console.log(`${this.#name} добавлена в стадо.`);\r\n// } else {\r\n//   console.log(`${this.#name} уже есть в стаде.`);\r\n// }\r\n*/\n// class User {\n// \t#name;\n// \t#surn;\n// \tsetName(name) {\n// \t\tthis.#name = name;\n// \t\treturn this;\n// \t}\n// \tsetSurn(surn) {\n// \t\tthis.#surn = surn;\n// \t\treturn this;\n// \t}\n// \tget Name() {\n// \t\treturn this.#name;\n// \t}\n// \tget Surn() {\n// \t\treturn this.#surn;\n// \t}\n// };\n// let user = new User;\n// user.Name = 'John';\n// user.Surn = 'Smith';\n// user.Name = ('Piter').Surn = ('Forest');\n// user.setName('John').setSurn('Smith');\n// console.log(user.Name);\n// console.log(user.Surn);\n// user.setName('Piter').setSurn('Forest');\n// console.log(user.Name);\n// console.log(user.Surn);\n// class User {\n// };\n// class Trust {\n// }\n// let trust = new Trust();\n// let user = new User();\n// console.log(user instanceof User);\n// console.log(trust instanceof User);\n// class Student1 {\n// \tconstructor(name) {\n// \t\tthis.name = name;\n// \t}\n// }\n// class Employee {\n// \tconstructor(name) {\n// \t\tthis.name = name;\n// \t}\n// }\n// let users = [\n// \tnew Student1('user1'),\n// \tnew Employee('user2'),\n// \tnew Student1('user3'),\n// \tnew Employee('user4'),\n// \tnew Student1('user5'),\n// \tnew Employee('user6'),\n// \tnew Student1('user7'),\n// ];\n// let nameOfStudents = [];\n// let nameOfEmployee = [];\n// for(let elem of users) {\n//   if(elem instanceof Student1) {\n//     nameOfStudents.push(elem.name)\n//   } else{\n//     nameOfEmployee.push(elem.name)\n//   }\n// };\n// console.log(nameOfEmployee);\n// console.log(nameOfStudents);\n/*\r\nclass arrayHelper {\r\n  array;\r\n  summ = 0;\r\n  middle = 0;\r\n  constructor(array) {\r\n    this.array = array;\r\n  }\r\n  summOfArray() {\r\n    this.summ = 0;\r\n    for (let elem of this.array) {\r\n      this.summ += elem;\r\n    }\r\n    return this.summ;\r\n  }\r\n  middleOfArray() {\r\n    return this.array.length > 0 ? this.summOfArray() / this.array.length : 0;\r\n  }\r\n}\r\n\r\nlet myArray = [1, 2, 3, 4, 5, 6, 7];\r\n\r\nlet arrayToCalc = new arrayHelper(myArray);\r\n\r\nconsole.log(arrayToCalc.summOfArray());\r\nconsole.log(arrayToCalc.middleOfArray());\r\n*/\n/*\r\nclass String {\r\n  str;\r\n  constructor(str) {\r\n    this.str = str;\r\n    console.log(str)\r\n  }\r\n  strToCheck() {\r\n\r\n    let res = this.str.replace(/\\s/g, '');\r\n\r\n    if (res === \"\") {\r\n      return \"The string is empty\";\r\n    } else {\r\n      return res;\r\n    }\r\n  }\r\n};\r\nlet string  = '         Привет   привет П р и в е т.       ';\r\n\r\nlet stringCheck = new String(string);\r\n\r\nconsole.log(stringCheck.strToCheck());\r\n\r\nlet trimmed  = string.trim();\r\nconsole.log(trimmed);\r\n*/\n/*\r\nfunction isEmail(str) {\r\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(str);\r\n}\r\n\r\n// Пример использования:\r\nlet email = \"example@email.com\";\r\nif (isEmail(email)) {\r\n  console.log(\"Верный формат email\");\r\n} else {\r\n  console.log(\"Неверный формат email\");\r\n}\r\n*/\n/*\r\n  class Checkmail {\r\n    mail;\r\n    constructor (mail) {\r\n      this.mail = mail;\r\n    }\r\n    isMail() {\r\n      if(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(this.mail)) {\r\n        console.log(`The mail is OK`);\r\n      }else {\r\n        console.log(`The mail is not OK`)\r\n      }\r\n    }\r\n  };\r\n\r\n\r\nlet mail1 = 'jndjfn@google.com';\r\n\r\nlet myMail = new Checkmail (mail1);\r\n\r\nconsole.log(myMail.isMail());\r\n*/\n// class Domain {\n//   domian;\n//   constructor(domian) {\n//     this.domian = domian;\n//   }\n//   checkDomian() {\n//     if( /^[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(this.domian)){\n//       return this.domian;\n//     }else{\n//       return `Its not OK`;\n//     }\n//   }\n// };\n// let dom = 'google.com';\n// let dom1 = 'sdlfjsldkfjs';\n// let chkDom = new Domain(dom1);\n// console.log(chkDom.checkDomian());\n/*\r\nconst person = {\r\n  name : {\r\n    first: 'Bob',\r\n    last: 'Smith'\r\n  },\r\n  \r\n  age: 32,\r\n  gender: \"male\",\r\n  interests: [\"music\", \"skiing\"],\r\n  bio: function () {\r\n    alert(\r\n      this.name.first +\r\n        \" \" +\r\n        this.name.last +\r\n        \" is \" +\r\n        this.age +\r\n        \" years old. He likes \" +\r\n        this.interests[0] +\r\n        \" and \" +\r\n        this.interests[1] +\r\n        \".\",\r\n    );\r\n  },\r\n  greeting: function () {\r\n    alert(\"Hi! I'm \" + this.person.name.last + \".\");\r\n  },\r\n};\r\nconsole.log (person.name.first);\r\nlet myDataName = \"height\";\r\nlet myDataValue = \"1.75m\";\r\nperson[myDataName] = myDataValue;\r\nconsole.log(person.height);\r\n// console.log(person.bio());\r\n\r\nmyData = \"weight\";\r\nmyValue = '765 kg';\r\nperson[myData] = myValue;\r\nconsole.log(person.weight);\r\n\r\n*/\n// class CityName {\n//   name;\n//   constructor(name) {\n//     this.name = name;\n//   }\n// };\n// class Users {\n//   userName;\n//   userSur;\n//   userAge;\n//   city;\n//   constructor(userName, userSur, userAge, city1) {\n//     this.userName = userName;\n//     this.userSur = userSur;\n//     this.userAge = userAge;\n//     this.city1 = city1;\n//   }\n// };\n// let city = new CityName ('London');\n// let user = new Users('Piter', 'Pan', 58, city);\n// console.log(user.userName);\n// console.log(user.city1.name);\n// class City {\n// \tconstructor(name) {\n// \t\tthis.name = name;\n// \t}\n// }\n// class User {\n// \tconstructor(name, surn, city1) {\n// \t\tthis.name = name;\n// \t\tthis.surn = surn;\n// \t\tthis.city1 = city1;\n// \t}\n// }\n// let city = new City('luis');\n// let user = new User('john', 'smit', city);\n// console.log(user.name);\n// console.log(user.city1.name);\n/*\r\nclass Employee {\r\n  constructor(name, position, department) {\r\n    this.name = name;\r\n    this.position = position;\r\n    this.department = department;\r\n  }\r\n}\r\nclass workPosition {\r\n  constructor(pos) {\r\n    this.pos = pos;\r\n  }\r\n};\r\nclass Department {\r\n  constructor(dep) {\r\n    this.dep = dep;\r\n  }\r\n}\r\nlet posNew = new workPosition('cheaf');\r\nlet depNew = new Department('logistic');\r\nlet newWorker = new Employee('newMann', posNew, depNew);\r\n\r\n// console.log(newWorker.name);\r\n// console.log(newWorker.position.pos,);\r\n// console.log(newWorker.department.dep);\r\n*/\n/*\r\nclass Worker {\r\n  constructor( name, posada, department,) {\r\n    this.name = name; \r\n    this.posada = posada;\r\n    this.department = department;\r\n  }\r\n};\r\n\r\nlet workerNew = new Worker(newWorker, posNew, depNew);\r\nconsole.log(workerNew.name.name);\r\nconsole.log(workerNew.posada.pos);\r\nconsole.log(workerNew.department.dep);\r\n*/\n/*\r\nclass Psarnia {\r\n  name;\r\n  waga;\r\n \r\n  constructor(name, waga) {\r\n    this.name = name;\r\n    this.waga = waga;\r\n  }\r\n  getName() {\r\n    return this.name;\r\n  }\r\n  getWaga() {\r\n    return this.waga;\r\n  }\r\n};\r\n\r\nlet psy = [\r\n  new Psarnia('gru', 15),\r\n  new Psarnia('fnu', 18),\r\n  new Psarnia('resp', 20)\r\n];\r\nlet psyNames = [];\r\nlet psyWaga = [];\r\nfor(let item of psy) {\r\n    psyNames.push(item.getName());\r\n    psyWaga.push(item.getWaga());\r\n  };\r\n  console.log(psyNames);\r\n  console.log(psyWaga);\r\n*/\n// class User {\n//   name;\n//   constructor(name) {\n//     this.name = name;\n//   }\n//   getName() {\n//     return this.name;\n//   }\n// }\n// class UsersCollection {\n//   constructor() {\n//     this.users = [];\n//   }\n//   add(user) {\n//     this.users.push(user);\n//   }\n//   showUsers() {\n//     for (let item of this.users) {\n//       console.log(item.getName());\n//     }\n//   }\n// }\n// let uc = new UsersCollection();\n// uc.add(new User('Bob'));\n// uc.add(new User('Bill'));\n// uc.add(new User('Iwona'));\n// console.log(uc);\n// uc.showUsers();\n/*\r\n\r\nclass Worker {\r\n  constructor(name) {\r\n    this.name = name;\r\n  }\r\n  get Name() {\r\n    return this.name;\r\n  }\r\n};\r\n\r\n\r\nclass WorkerCollection {\r\n  workers;\r\n  constructor() {\r\n    this.workers = [];\r\n  }\r\n  addWorker(worker) {\r\n    this.workers.push(worker);\r\n  }\r\n\r\n  showName() {\r\n    for (let worker of this.workers) {\r\n    console.log(worker.Name);\r\n    }\r\n  }\r\n  // showPosition() {\r\n  //   for (let human of this.workersPosition) {\r\n  //   console.log(human.get.Name);\r\n  //   }\r\n  \r\n};\r\n\r\n\r\nlet workerCollection = new WorkerCollection();\r\n\r\nlet workers = [\r\nworkerCollection.addWorker(new Worker('Billy')),\r\nworkerCollection.addWorker(new Worker('Mike')),\r\nworkerCollection.addWorker(new Worker('Billy')),\r\n];\r\n\r\n\r\nworkerCollection.showName();\r\n*/\n// console.log('sdsdfsdfsdf');\n// class MyObject() {\n//   // Конструктор объекта\n// }\n// // Добавление метода через прототип\n// MyObject.prototype.myMethod = function() {\n//   console.log(\"This is my method\");\n// };\n// let myInstance = new MyObject();\n// myInstance.myMethod();\n/*\r\nclass MathOperation {\r\na;\r\nb;\r\nconstructor() {\r\n\r\n}\r\n};\r\n\r\nMathOperation.prototype.add = function(a,b) {\r\n  let c = a + b;\r\n  return c;\r\n};\r\n\r\nMathOperation.prototype.subs= function (a,b) {\r\n  return a - b;\r\n};\r\ndebugger;\r\nlet calculator1 = new MathOperation();\r\nconsole.log(calculator1.add(3,5));\r\nlet calculator2 = new MathOperation();\r\nconsole.log(calculator2.subs(50, 59));\r\nwindow.print()\r\n\r\n*/\n// var str = \"я учусь и мне нравится учиться\";\n// // console.log(str.endsWith(\"учиться\")); // true\n// // console.log(Number(str.endsWith(\"Я\", 1))); // false\n// // console.log(str.endsWith(\"Бы\", 3)); // true\n// // console.log(str.includes('Я'));\n// // console.log(str.includes('мне'));\n// let a = str.at(15);\n// let b = str.at(2);\n// console.log(`${a}`);// возвратит \"Яу\"\n// let index = 3;\n// console.log(str.charAt(index)); // 'ч'\n// let substr = 'нравится';\n// console.log(str.includes(substr)); //  true;\n// console.log(Number(str.includes(substr))); //  1\n// let indexOf = 'р';\n// console.log(str.length - 1);\n// console.log(str.indexOf(indexOf)); // 15\n// console.log(str.at(15) == str.indexOf(indexOf)); // p !=== 15 false\n// console.log(str.lastIndexOf('я')); // 29\n// // \"абв\".repeat(-1); // RangeError\n// // \"абв\".repeat(0); // ''\n// // \"абв\".repeat(1); // 'абв'\n// // \"абв\".repeat(2); // 'абвабв'\n// // \"абв\".repeat(3.5); // 'абвабвабв' (количество будет преобразовано в целое число)\n// // \"абв\".repeat(1 / 0); // RangeError\n// let re = /учиться|учусь/gi; //\n// let newstr = str.replace(re, 'изучать' );\n// console.log(newstr);\n// const paragraph = \"I think Ruth's dog is cuter than your dog!\";\n// console.log(paragraph.replaceAll('dog', 'monkey'));\n// // Expected output: \"I think Ruth's monkey is cuter than your monkey!\"\n// // Global flag required when calling replaceAll with regex\n// const regex = /Dog/gi;\n// console.log(paragraph.replaceAll(regex, 'ferret'));\n// // Expected output: \"I think Ruth's ferret is cuter than your ferret!\"\n// var testString = \"hey JuDe\";\n// var reg = 'J';\n// let g = testString.search(reg,);\n// console.log(g);\n// ; // выведет: hey Jude содержит /[A-Z]/g\n// class User {\n//   name;\n//   surn;\n//   constructor(name, surn) {\n//     this.name = name;\n//     this.surn = surn;\n//   }\n//   setName(name) {\n//     this.name = name;\n//   }\n//   getName() {\n//     return this.name;\n//   }\n//   setSurn(surn) {\n//     this.surn = surn;\n//   }\n//   getSurn() {\n//     return this.surn;\n//   }\n// };\n// class Employee extends User {\n//   constructor (name, surn, age) {\n//     super(name, surn);\n//     this.age = age;\n//   }\n//   setAge(age) {\n//     this.age = age;\n//   }\n//   getAge() {\n//     return this.age;\n//   }\n//   setName(name) {\n//     if(name.length > 0) {\n//       super.setName(name);\n//     } else{\n//       throw new Error (\"the name is short\");\n//     }\n//   }\n//   setAge(age) {\n//     if(age > 18 && age< 65) {\n//       this.age = age;\n//     } else {\n//       throw new Error(\"you are too young\");\n//     }\n//   }\n// };\n// let worker = new Employee('Billy', 'Douell', 58);\n// console.log(worker.getName());\n// console.log(worker.getSurn());\n// console.log(worker.getAge());\n// // , getSurn(), getAge());\n// class User {\n//   age;\n//   constructor(age) {\n//     this.age = age;\n//   }\n//   setAge(age) {\n//     if (age >= 0) {\n//       this.age = age;\n//     } else {\n//       throw new Error('need age more 0');\n//     }\n//   }\n//   getAge() {\n//     return this.age;\n//   }\n// }\n// class Employee extends User {\n//   constructor(age) {\n//     super(age);\n//   }\n//   setAge(age) {\n//     if (age > 0) {\n//       if (age <= 120) {\n//         super.setAge(age);\n//       } else {\n//         throw new Error('need age less 120');\n//       }\n//     } else {\n//       throw new Error('need age more 0');\n//     }\n//   }\n// }\n// let worker = new Employee(25);\n// try {\n//   worker.setAge(100);\n//   console.log(worker.getAge());\n// } catch (error) {\n//   console.error(error.message);\n// }\n// class User {\n//   name;\n//   constructor(name) {\n//     this.name = name;\n//   }\n//   setName(name) {\n//     this.name = name;\n//   }\n//   getName() {\n//     return this.name;\n//   }\n//   capeFirst(str) {\n//     return str[0].toUpperCase() + str.slice(1);\n//   }\n// };\n// class Employee extends User {\n//   surn;\n//   age;\n//   constructor(surn, age, name) {\n//     super(name);\n//     this.surn = surn;\n//     this.age = age;\n//   }\n//   setSurn(surn) {\n//     this.surn = surn;\n//   }\n//   getSurn(){\n//     return this.surn;\n//   }\n//   getSurn1() {\n//     return this.capeFirst(this.surn);\n//   }\n// };\n// let worker = new Employee();\n// worker.setSurn('douell');\n// console.log(worker.getSurn());\n// console.log(worker.getSurn1());\n/*\r\nclass User {\r\n\t#name;\r\n\t#surn;\r\n\t\r\n\tsetName(name) {\r\n\t\tthis.#name = name;\r\n\t}\r\n\tgetName() {\r\n\t\treturn this.#name;\r\n\t}\r\n\t\r\n\tsetSurn(surn) {\r\n\t\tthis.#surn = surn;\r\n\t}\r\n\tgetSurn() {\r\n\t\treturn this.#surn;\r\n\t}\r\n};\r\n\r\nclass Boy extends User {\r\n  constructor(#name, #surn) {\r\n    super(#name,#surn);\r\n  }\r\n  getFull() {\r\n    return this.#name + ' ' + this.#surn;\r\n  }\r\n\r\n};\r\nlet worker = new Boy();\r\nworker.setName('Mike');\r\nconsole.log(worker.getName())\r\n*/\n// class User {\n//   #name;\n//   #surn;\n//   setName(name) {\n//     this.#name = name;\n//   }\n//   getName() {\n//     return this.#name;\n//   }\n//   setSurn(surn) {\n//     this.#surn = surn;\n//   }\n//   getSurn() {\n//     return this.#surn;\n//   }\n// }\n// class Boy extends User {\n//   constructor(name, surn) {\n//     super();\n//     this.setName(name);\n//     this.setSurn(surn);\n//   }\n//   getFull() {\n//     return this.getName() + ' ' + this.getSurn();\n//   }\n// }\n// let worker = new Boy();\n// worker.setName('Mike');\n// worker.setSurn('Doe');\n// console.log(worker.getFull()); // Output: Mike Doe\n// class User {\n//   #name;\n//   constructor(name) {\n//     this.#name = name;\n//   }\n//   setName(name) {\n//     this.#name = name;\n//   }\n//   getName() {\n//     return this.#name;\n//   }\n// };\n// class worker extends User {\n//   constructor(name) {\n//     super(name);\n//   }\n//   getFull() {\n//     return this.getName();\n//   }\n// };\n// let boy = new worker();\n// boy.setName('Mike');\n// console.log(boy.getFull());\n// class User {\n//   #name;\n//   constructor(name) {\n//     this.#name = name;\n//   }\n//   setName(name) {\n//     this.#name = name;\n//   }\n//   getName() {\n//     return this.#name;\n//   }\n// }\n// class Worker extends User {\n//   constructor(name) {\n//     super(name);\n//   }\n//   getFull() {\n//     return this.getName();\n//   }\n// }\n// let boy = new Worker('Mike');\n// console.log(boy.getFull());\n/*\r\nclass User {\r\n  #age;\r\n  setAge(age) {\r\n    this.#age = age;\r\n  }\r\n  getAge() {\r\n    return this.#age;\r\n  }\r\n};\r\n\r\nclass User1 extends User {\r\n\r\n  addAge() {\r\n    this.setAge(this.getAge() + 1);\r\n  }\r\n};\r\n\r\nlet newMann = new User1();\r\nnewMann.setAge(58);\r\nconsole.log(newMann.getAge());\r\nnewMann.addAge();\r\nconsole.log(newMann.getAge());\r\n*/\n/*\r\nclass User {\r\n\t#name;\r\n\t\r\n\tsetName(name) {\r\n\t\tthis.#name = name;\r\n\t}\r\n\tgetName() {\r\n\t\treturn this.#name;\r\n\t}\r\n}\r\n\r\nclass Employee extends User {\r\n\tsetName(name) {\r\n\t\tif (name.length > 0) {\r\n\t\t\tthis.super.setName(name) \r\n\t\t}\r\n\t}\r\n}\r\n*/\n/*\r\nclass User {\r\n\tsetName(name) {\r\n\t\tif (this.notEmpty(name)) {\r\n\t\t\tthis.name = name;\r\n\t\t}\r\n\t}\r\n\tgetName() {\r\n\t\treturn this.name;\r\n\t}\r\n\t\r\n\t_notEmpty(str) {\r\n\t\treturn str.length > 0;\r\n\t}\r\n}\r\nclass Employee extends User {\r\n\tsetSurn(surn) {\r\n\t\tif (this._notEmpty(surn)) {\r\n\t\t\tthis.surn = surn;\r\n\t\t}\r\n\t}\r\n\tgetSurn() {\r\n\t\treturn this.surn;\r\n\t}\r\n}\r\n*/\n/*\r\nclass User {\r\n\t_name;\r\n\t\r\n\tsetName(name) {\r\n\t\tthis._name = name;\r\n\t}\r\n\tgetName() {\r\n\t\treturn this._name;\r\n\t}\r\n}\r\n\r\nclass Employee extends User {\r\n\tsetName(name) {\r\n\t\tif (_name.length > 0) {\r\n\t\t\tthis._name = name;\r\n\t\t}\r\n\t}\r\n}\r\n*/\n// class User {\n// \tsetName(name) {\n// \t\tthis._name = name;\n// \t}\n// \tgetName() {\n// \t\treturn this._name;\n// \t}\n// };\n// class Student1 extends User {\n// \tsetYear(year) {\n// \t\tthis._year = year;\n// \t}\n// \tgetYear() {\n// \t\treturn this._year;\n// \t}\n// };\n// class StudentProgrammer extends Student1 {\n// \tsetSkill(skill) {\n// \t\tthis._skill = skill;\n// \t}\n// \tgetSkill() {\n// \t\treturn this._skill;\n// \t}\n// };\n// let boy = new StudentProgrammer();\n// boy.setSkill(12);\n// console.log(boy.getSkill());\n// boy.setName('Mike');\n// console.log(boy.getName());\n// boy.setYear(34);\n// console.log(boy.getYear());\n/*\r\nclass User {\r\n  name;\r\n  setName(name) {\r\n    this.name = name;\r\n  }\r\n  getName() {\r\n    return this.name;\r\n  }\r\n  CorStr(str) {\r\n    return str[0].toUpperCase() + str.slice(1);\r\n  }\r\n}\r\nclass Employee extends User {\r\n  salary;\r\n  setSalary(salary) {\r\n    this.salary = salary;\r\n  }\r\n  getSalary() {\r\n    return this.salary;\r\n  }\r\n  addSalary(salary, adds = 100) {\r\n    let newSalary = salary + adds;\r\n    return newSalary\r\n  }\r\n}\r\n\r\nclass Programmer extends Employee {\r\n  position;\r\n  setPos(position) {\r\n    this.position = position;\r\n  }\r\n  getPos() {\r\n    return this.position;\r\n  }\r\n}\r\n\r\nclass Designer extends Programmer {\r\n  skill;\r\n  setSkill(skill) {\r\n    this.skill = skill;\r\n  }\r\n  getSkill() {\r\n    return this.skill;\r\n  }\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\nlet user = new Designer();\r\nuser.setSkill(4);\r\nconsole.log(user.getSkill());\r\nuser.setPos('junior');\r\nuser.setSalary(2000);\r\nuser.setName('Mike');\r\n\r\nconsole.log(user.getSkill(), user.getPos(), user.getSalary(), user.getName());\r\nconsole.log(user.addSalary(user.getSalary()));\r\nconsole.log(user.CorStr(user.getPos()));\r\n*/\n// let elem = document.querySelector('p');\n// console.dir(elem);\n// let elem = document.querySelector('div');\n// console.dir(elem);\nvar _name = /*#__PURE__*/new WeakMap();\nvar User = /*#__PURE__*/function () {\n  function User(name) {\n    _classCallCheck(this, User);\n    _classPrivateFieldInitSpec(this, _name, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _name, name);\n  }\n  _createClass(User, [{\n    key: \"getName\",\n    value: function getName() {\n      return _classPrivateFieldGet(this, _name);\n    }\n  }]);\n  return User;\n}(); // Создадим объект этого класса:\nvar user = new User(\"john\");\n// Запишем код метода в переменную:\n\nvar func = user.getName;\n// В момент записи метода в переменную контекст и потерялся. Теперь this внутри кода метода не будет указывать на объект класса. Проверим, вызовем нашу функцию:\n\n// console.log(func()); // ошибка\n// Для решения проблемы можно привязать контекст к функции, например, через bind:\n\n// func = func.bind(user);\n// console.log(func()); // работает\n/*\r\nfunction sayHello() {\r\n  console.log(`Hello, ${this.sur}!`);\r\n}\r\n\r\nconst person = {\r\n  name: 'John',\r\n  sur: \"Douell\"\r\n};\r\n\r\nconsole.log(sayHello.call(person)); // Выведет \"Hello, John!\"\r\n\r\n\r\nfunction sayGoodbye() {\r\n  console.log (`Goodbye ${this.mom} `);\r\n};\r\n\r\nlet personen = {\r\n  name: 'Lily',\r\n  name2: 'Mikki',\r\n  mom: 'Pippi'\r\n};\r\nsayGoodbye.call(personen);\r\n\r\n*/\n/*\r\nСтворіть клас A з методом read\r\nСтворіть клас B, який наслідується (extends) від A, та має метод close\r\nСтворіть instanceB класу B\r\nПеревірити:\r\nнаявніcть методів read/close в instanceB через оператор in\r\nнаявніcть методів read/close в instanceB через метод hasOwnProperty\r\nвсі ключі instanceB (Object.keys)\r\n\r\n*/\nvar A = /*#__PURE__*/function () {\n  function A() {\n    _classCallCheck(this, A);\n    _defineProperty(this, \"variableA\", void 0);\n  }\n  _createClass(A, [{\n    key: \"read\",\n    value: function read() {\n      console.log(\"I am a method READ in obj A\");\n    }\n  }]);\n  return A;\n}();\nvar B = /*#__PURE__*/function (_A) {\n  _inherits(B, _A);\n  var _super = _createSuper(B);\n  function B() {\n    var _this;\n    _classCallCheck(this, B);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"variableB\", void 0);\n    return _this;\n  }\n  _createClass(B, [{\n    key: \"close\",\n    value: function close() {\n      console.log(\"I am a method CLOSE in obj B\");\n    }\n  }]);\n  return B;\n}(A);\nvar instanceB = new B();\n\n// console.log('variableA' in instanceB); // true\n// console.log('read' in A.prototype); //true\n\n// console.log('read' in instanceB);   //true\n// console.log('close' in instanceB); // true\n\nconsole.log(instanceB.hasOwnProperty('read')); // false becauce it is prop of prototype\nconsole.log(instanceB.hasOwnProperty('close')); // false becauce it is prop of prototype\n\nvar keys = Object.keys(instanceB);\nconsole.log(keys);\n\n//# sourceURL=webpack:///./src/js/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/script.js"]();
/******/ 	
/******/ })()
;