/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/script.js":
/*!**************************!*\
  !*** ./src/js/script.js ***!
  \**************************/
/***/ (() => {

eval("// import _ from 'lodash';\n\n// let maxElem = 0;\n// let key_maxElem = 0;\n\n// const { name } = require(\"browser-sync\");\n\n// let arr = [1, 2, 6, 4, 5, 3];\n// for(let i = 0;  i < arr.length - 1; i++) {\n//   if(arr[i] > maxElem) {\n//     maxElem = arr[i];\n//     key_maxElem = i;\n//   }\n//     if( arr[i] !== maxElem && i !== key_maxElem) {\n//       arr[i] = 0;\n//     }\n\n// }\n// console.log(maxElem);\n// console.log(key_maxElem);\n// // for(let i = 0;  i <= arr.length - 1; i++) {\n\n// // }\n\n// console.log(arr);\n\n/*  HOMEWORK 9 \r\nПереписати код нижче з використанням конструкції switch…case*/\n\n/*   ИСХОДНЫЙ КОД:\r\n\r\nlet numOrStr = prompt('input number or string');\r\nconsole.log(numOrStr)\r\n\r\nif(numOrStr === null) {\r\nconsole.log('ви скасували')\r\n} else if( numOrStr.trim() === '' ) {\r\nconsole.log('Empty String');\r\n} else if ( isNaN( +numOrStr ) ) {\r\nconsole.log(' number is Ba_NaN')\r\n} else {\r\nconsole.log('OK!')\r\n}\r\n\r\n        РЕШЕНИЕ ДОМАШНЕГО ЗАДАНИЯ С ИСПОЛЬЗОВАНИЕМ switch / case    */\n/*\r\nlet numOrStr = prompt('input number or string');\r\nconsole.log(numOrStr)\r\n\r\nswitch(true) {\r\n  case numOrStr === null:\r\n    console.log('ви скасували');\r\n  break;\r\n  case  numOrStr === '':\r\n    console.log('Empty String');\r\n  break;\r\n  case isNaN( +numOrStr ):\r\n    console.log(' number is Ba_NaN');\r\n  break;\r\n  default:\r\n    console.log('OK!');\r\n  break;\r\n}\r\n\r\n*/\n\n/*      Hometask additional \"Check - list\"\r\n        \r\n       FALSE\r\nconsole.log(Boolean(0));         // false\r\nconsole.log(Boolean(+0));        // false\r\nconsole.log(Boolean(-0));        // false\r\nconsole.log(Boolean(null));      // false\r\nconsole.log(Boolean(''));        // false\r\nconsole.log(Boolean(NaN));       // false\r\nconsole.log(Boolean(undefined)); // false\r\n          \r\n          TRUE\r\n\r\nconsole.log(Boolean('string'));   // true\r\nconsole.log(Boolean(+Infinity));  // true  \r\nconsole.log(Boolean(-Infinity));  // true\r\nconsole.log(Boolean('number'));   // true\r\n\r\n        ACHTUNG,  STRING!!!\r\n\r\nconsole.log(Boolean('0'));         // true\r\nconsole.log(Boolean('false'));     // true\r\nconsole.log(Boolean('NaN'));       // true\r\nconsole.log(Boolean('null'));      // true\r\nconsole.log(Boolean('undefined')); // true\r\n*/\n\n/*\r\n  1 const/let\r\n  2 variable names\r\n  3 correct output\r\n*/\n\n// HOME TASK - TO READ BY YOURSELF\n/*number.toString()\r\n\r\n10.toString();\r\n\r\nJS воспринмимает эту запись как попытку обратьтся к числу с плавающей точкой\r\nто есть к десятичной дроби. \r\nЧто бы избежать этого надо использовать один из методов изменения записи ЦЕЛЫХ чисел перед \r\ntoString() \r\n\r\nvar number = 10;\r\nnumber.toString(); или\r\n10..toString();     или\r\n10 .toString();    или\r\n(10).toString();   \r\n\r\nВ то же время проблем с действительными дробными числами не возникает и \r\nзапись может быть такова: \r\n\r\n12.5.toString(); // 12.5 преобразовывается в строку без проблем.\r\n\r\n\r\n\r\n\r\n// javascript number literal to string problem \r\n\r\n/*\r\nnumber\r\nnumber -> string\r\nnumber -> boolean (0, NaN -> false / ALL -> true)\r\n\r\n// const number = 10;\r\n// const string1 = number.toString(); // вернет '10'\r\n// const string2 = String(number);    // вернет '10'\r\n// const string3 = number + '';       // вернет '10'\r\n// const string4 = `${number}`;       // вернет '10'\r\n// const boolean = Boolean(number);   // // вернет true (Boolean)\r\n*/\n/*\r\nstring\r\nstring -> number\r\nstring -> boolean ('' -> false / all other -> true)\r\n\r\n// const string = '10';\r\n// const number1 = Number(string);  // вернет 10 как число.\r\n// const number2 = +string;         // вернет 10 как число.\r\n// const number3 = string / 5;      // вернет 2 как число\r\n// const boolean = Boolean(string); //вернет true как булево значение\r\n*/\n/*\r\nconst a;\r\nString(a);\r\nNumber(a);\r\nBoolean(a);\r\n\r\nundefined -> string -> 'undefined' \r\nundefined -> number -> NaN\r\nundefined -> boolean -> false\r\n*/\n/*\r\nnull -> string -> 'null'\r\nnull -> number -> 0\r\nnull -> boolean -> false\r\n*/\n/*\r\nboolean -> string -> 'true'/'false'\r\nboolean -> number -> 1 / 0\r\n*/\n// HOMETASK 2 - > create a table with all transformations\n// ------ \n// WTF JS  ---------------  просмотрено но не осознано )))\n\n// const a = 10;\n// const b = '10';\n// const c = true;\n\n// let check1 = '1' == boolean;\n\n// const check2 = check1 == Boolean(check1); // true\n\n// const checkToNumber1 = a === Number(b);  // false\n// const checkToString1 = String(a) === b;  // true\n// const checkToNumber2 = a !== Number(b);  // false\n// const checkToString2 = String(a) !== b;  // false\n// const checkToNumber3 = a != Number(b);   // false\n// const checkToString3 = String(a) != b;   // false\n\n// a === b => true  ???? //false так как ф - число а b - строка!!!!\n// 1 !== 1 => false\n// 1 === 2 => false\n// 1 !== 2 => true\n\n// if (check1) {\n//   alert('YES, THEY ARE EQUAL!');\n// }\n\n// if (check2) {\n//   // DO THIS\n// }\n\n// const a = 10;\n// const b = '10';\n// const equal = a === b; // false\n// // const notEqual = a !== b; // true\n// const notEqual1 = !a; // false\n// const notEqual2 = !b; // false\n// const notEqual3 = !equal; // true\n\n// const a = !!alert(1); // false\n// const b = !!10; // true\n// const c = !!'10'; // true\n// const d = !!''; // false\n\n// Boolean(myVariable);\n// const a = !myVar; // true/false\n// const b = !a; // false/true\n// const c = +b; // 0/1\n// const d = (+(!(!myVar)));\n\n// const string = 'a';\n// const number = Number(string);\n\n// const a = true || ...; // -> true\n// const c = false && ...; // -> false\n\n// let arr = [1, 2, 3, 4, 5];\n// let count;\n// for(let item of arr) {\n//   console.log(item);\n\n// }\n// console.log(arr.length + '  length');\n// let test = function func() {\n\n//   console.log('!');\n//   test();\n\n// }\n// test();\n// let obj = {\n//   func1: function() {return 1},\n//   func2: function() {return 2},\n//   func3: function() {return 3},\n//   func4: function() {return 4}\n// };\n// console.log(obj.func1() + obj.func2() + obj.func3() + obj.func4());\n\n// for(let elem in obj) {\n//   console.log(elem());\n//   let summ = 0;\n//   summ += elem(); \n// }\n\n// let math = {\n//   square: function(num) {return num + num},\n//   cube: function(num) {return (num * num) + (num * num)},\n//   cube1: function(num) {return (num * num* num) + (num * num * num)},\n// };\n// console.log(math.square(2));\n// console.log(math.cube(2));\n// console.log(math.cube1(2));\n\n// let test = function(func1, func2, func3) {\n// console.log(func1() + func2() + func3());\n// };\n\n// test(function() {return 1}, function() {return 2}, function() {return 3});\n\n// let func1 = () => {return 1};\n// let func2 = () => { return 2};\n// let func3 = () => {return 88};\n\n// let test = (fu1, fu2, fu3) => {\n\n//   console.log(fu1() + fu2() + fu3());\n\n// };\n// test(func1, func2, func3);\n// let test =(num, func1, func2) => {\n//   console.log(func1(num) + func2(num));\n// };\n// let f1 = (num) => { return num * num };\n// let f2 = (num) => { return num * num * num};\n// test(3, f1, f2);\n\n// let test = (arr, func) => {\n\n//   for(let i = 0; i < arr.length; i++) {\n//     arr[i] = func(arr[i]);\n//   }\n//   return arr\n// };\n\n// let arr = [3, 4, 5, 6, 7];\n// let f1 = (num) => { return num ** 3};\n// let result = test(arr, f1);\n// console.log(result);\n\n// let func = (num1, num2) => {\n//   return num1 * num1 + num2 * num2;\n// };\n// console.log(func(2,3));\n\n// let test =(num1, num2) => {\n//   let square =(num) => {\n//     return num * num\n//   };\n//   return square(num1) + square(num2);\n// };\n\n// let result = test(4,5);\n// console.log(result);\n\n/*\r\nСделайте функцию func, которая параметрами будет принимать два \r\nчисла, а возвращать сумму квадрата первого числа с кубом второго числа.\r\n Сделайте для этого вспомогательную функцию square, возводящую число в \r\n квадрат, и вспомогательную функцию cube, возводящую число в куб.\r\n*/\n\n// let func =(num1, num2) => {\n\n// let square = (num) => {return num * num};\n\n// let cube = (num) => {return Math.pow(num, 3)};\n//   return square(num2) + cube(num1);\n// };\n// let result = func(23,3);\n// console.log(result);\n// let func1 = () => {\n//   let func2 =() => {\n//     let func3 = () => {\n//       let func4 = () => {\n//         return '!';\n//       };\n//       return func4;\n//     };\n//     return func3;\n//   };\n//   return func2;\n// };\n\n// let result = func1()()()();\n// console.log(result);\n\n// let func1 = (num1) => {\n//   return function(num2) {\n//     return num1 + num2;\n//   }\n// };\n\n// console.log( func1(4)(5));\n\n// let func = (num1) => {\n//   return function(num2) {\n//     return function (num3) {\n//       return num1 + num2 + num3;\n//     }\n//   }\n// };\n// console.log(func(2)(3)(4));\n\n// Сделайте функцию func, которая будучи вызвана вот \n// так: func(2)(3)(4)(5)(), вернет массив переданных в параметры чисел.\n// let func2 = (num1) => {\n//   let arr = [num1];\n//   return function (num2) {\n//     arr.push(num2);\n//     return function (num3) {\n//       arr.push(num3)\n//       return function (num4) {\n//         arr.push(num4);\n//         return arr;\n//       };\n//     };\n//   };\n// };\n\n// let func1 = (num1) => {\n//   let arr = [num1];\n\n//   return function (num2) {\n//     arr.push(num2);\n\n//     return function (num3) {\n//       arr.push(num3);\n\n//       return function (num4) {\n//         arr.push(num4);\n\n//         return arr;\n//       };\n//     };\n//   };\n// // };\n\n// let result = func2(2)(3)(4)(5);\n// console.log(result); // Выведет: [2, 3, 4, 5]\n\n// function each(arr, callback) {\n//   res = [];\n//   for(let elem of arr) {\n//     res.push(callback(elem));\n//   }\n//   return res;\n// }\n\n// let all = each(['abc', 'cde', 'fge'], function callback(str) {return str.charAt(0).toUpperCase() + str.slice(1)});\n// console.log(all);\n\n// let func2 = (num1, num2) => num1 * num2;\n// console.log(func2(2, 8));\n\n// let func = num => num * num;\n// console.log(func(50));\n\n// let result = filter([1, 2, 3, 4, 5], function(elem) {\n// \tif (elem > 0) {\n// \t\treturn true;\n// \t} else {\n// \t\treturn false;\n// \t}\n// });\n\n// let result = filter([1, 2, 3, 4, 5], elem => elem > 0);\n// console.log(result);\n\n// function test() {\n// \tlet num = 1;\n\n// \treturn function() {\n// \t\tconsole.log(num);\n// \t}\n// }\n\n// let func = test();\n// func(); // выведет 1\n// console.log(test()());\n\n// let counter =() => {\n//   let num = 1;\n//   return function() {\n//     console.log(num);\n//     num++\n//     return num;\n//   }\n// };\n// let res = counter();\n// res();\n// // console.log(res());console.log(res());console.log(res());console.log(res());console.log(res());\n\n// let countmin = () => {\n//   let num = 10;\n//   let innerCounter = () => {\n//     if( num <= 0) {\n//       console.log('Current count  '  + num);\n//       num--\n//       innerCounter();\n//     } else {\n//       console.log ('All is empty');\n//     }\n//   }\n//   return  innerCounter\n// };\n// let res = countmin();\n// res();\n\n/*\r\nlet countmin = () => {\r\n  let num = 10;\r\n  let innerCounter = () => {\r\n    if (num > 0) {\r\n      console.log('Current count:', num);\r\n      num--;\r\n      innerCounter(); // Рекурсивный вызов innerCounter\r\n    } else {\r\n      console.log('All is empty');\r\n    }\r\n  };\r\n\r\n  return innerCounter;\r\n};\r\n\r\nlet res = countmin();\r\nres(); // Вызывает цикл, выводя текущий счетчик от 10 до 1\r\n// // Теперь код будет выполнять цикл и выводить текущее значение счетчика до тех пор, пока num не станет меньше или равным 0, после чего будет выведено 'All is empty'.\r\n\r\n*/\n\n//  ЗАМЫКАНИЯ \n\n// let counter = 0;\n\n// function test() {\n// \treturn function() {\n// \t\tconsole.log(counter);\n// \t\tcounter++;\n// \t};\n// }\n\n// let func = test;\n\n// let func1 = func();\n// let func2 = func();\n// func1();\n// func2();\n// func1();\n// func2()\n\n// let res = (() => {\n//   return (num1) => {\n//     return (num2) => {\n//       let sum = num1 + num2;\n//       return sum;\n//     }\n//   }\n// }) ()(1)(2);\n\nfunction curryAdd(x) {\n  return function (y) {\n    return function (z) {\n      return x + y + z;\n    };\n  };\n}\n// / Использование функции без каррирования\n// let resultWithoutCurry = add(1, 2, 3);\n// console.log(resultWithoutCurry); // Выведет 6\n\n// Использование функции с каррированием\nvar curryAddResult = curryAdd(1)(2)(3);\nconsole.log(curryAddResult); // Выведет 6\n\n//# sourceURL=webpack:///./src/js/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/script.js"]();
/******/ 	
/******/ })()
;